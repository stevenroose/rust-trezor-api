// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages-cardano.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct CardanoGetAddress {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoGetAddress {
    fn default() -> &'a CardanoGetAddress {
        <CardanoGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl CardanoGetAddress {
    pub fn new() -> CardanoGetAddress {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoGetAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoGetAddress {
        CardanoGetAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &CardanoGetAddress| { &m.address_n },
                    |m: &mut CardanoGetAddress| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "show_display",
                    |m: &CardanoGetAddress| { &m.show_display },
                    |m: &mut CardanoGetAddress| { &mut m.show_display },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CardanoGetAddress>(
                    "CardanoGetAddress",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CardanoGetAddress {
        static mut instance: ::protobuf::lazy::Lazy<CardanoGetAddress> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CardanoGetAddress,
        };
        unsafe {
            instance.get(CardanoGetAddress::new)
        }
    }
}

impl ::protobuf::Clear for CardanoGetAddress {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoGetAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoAddress {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoAddress {
    fn default() -> &'a CardanoAddress {
        <CardanoAddress as ::protobuf::Message>::default_instance()
    }
}

impl CardanoAddress {
    pub fn new() -> CardanoAddress {
        ::std::default::Default::default()
    }

    // optional string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CardanoAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoAddress {
        CardanoAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &CardanoAddress| { &m.address },
                    |m: &mut CardanoAddress| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CardanoAddress>(
                    "CardanoAddress",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CardanoAddress {
        static mut instance: ::protobuf::lazy::Lazy<CardanoAddress> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CardanoAddress,
        };
        unsafe {
            instance.get(CardanoAddress::new)
        }
    }
}

impl ::protobuf::Clear for CardanoAddress {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoGetPublicKey {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoGetPublicKey {
    fn default() -> &'a CardanoGetPublicKey {
        <CardanoGetPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl CardanoGetPublicKey {
    pub fn new() -> CardanoGetPublicKey {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoGetPublicKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoGetPublicKey {
        CardanoGetPublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &CardanoGetPublicKey| { &m.address_n },
                    |m: &mut CardanoGetPublicKey| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "show_display",
                    |m: &CardanoGetPublicKey| { &m.show_display },
                    |m: &mut CardanoGetPublicKey| { &mut m.show_display },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CardanoGetPublicKey>(
                    "CardanoGetPublicKey",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CardanoGetPublicKey {
        static mut instance: ::protobuf::lazy::Lazy<CardanoGetPublicKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CardanoGetPublicKey,
        };
        unsafe {
            instance.get(CardanoGetPublicKey::new)
        }
    }
}

impl ::protobuf::Clear for CardanoGetPublicKey {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoGetPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoGetPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoPublicKey {
    // message fields
    xpub: ::protobuf::SingularField<::std::string::String>,
    node: ::protobuf::SingularPtrField<super::messages_common::HDNodeType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoPublicKey {
    fn default() -> &'a CardanoPublicKey {
        <CardanoPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl CardanoPublicKey {
    pub fn new() -> CardanoPublicKey {
        ::std::default::Default::default()
    }

    // optional string xpub = 1;


    pub fn get_xpub(&self) -> &str {
        match self.xpub.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_xpub(&mut self) {
        self.xpub.clear();
    }

    pub fn has_xpub(&self) -> bool {
        self.xpub.is_some()
    }

    // Param is passed by value, moved
    pub fn set_xpub(&mut self, v: ::std::string::String) {
        self.xpub = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_xpub(&mut self) -> &mut ::std::string::String {
        if self.xpub.is_none() {
            self.xpub.set_default();
        }
        self.xpub.as_mut().unwrap()
    }

    // Take field
    pub fn take_xpub(&mut self) -> ::std::string::String {
        self.xpub.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .hw.trezor.messages.common.HDNodeType node = 2;


    pub fn get_node(&self) -> &super::messages_common::HDNodeType {
        self.node.as_ref().unwrap_or_else(|| super::messages_common::HDNodeType::default_instance())
    }
    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::messages_common::HDNodeType) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::messages_common::HDNodeType {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::messages_common::HDNodeType {
        self.node.take().unwrap_or_else(|| super::messages_common::HDNodeType::new())
    }
}

impl ::protobuf::Message for CardanoPublicKey {
    fn is_initialized(&self) -> bool {
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.xpub)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.xpub.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.xpub.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoPublicKey {
        CardanoPublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "xpub",
                    |m: &CardanoPublicKey| { &m.xpub },
                    |m: &mut CardanoPublicKey| { &mut m.xpub },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::messages_common::HDNodeType>>(
                    "node",
                    |m: &CardanoPublicKey| { &m.node },
                    |m: &mut CardanoPublicKey| { &mut m.node },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CardanoPublicKey>(
                    "CardanoPublicKey",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CardanoPublicKey {
        static mut instance: ::protobuf::lazy::Lazy<CardanoPublicKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CardanoPublicKey,
        };
        unsafe {
            instance.get(CardanoPublicKey::new)
        }
    }
}

impl ::protobuf::Clear for CardanoPublicKey {
    fn clear(&mut self) {
        self.xpub.clear();
        self.node.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx {
    // message fields
    inputs: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxInputType>,
    outputs: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxOutputType>,
    transactions_count: ::std::option::Option<u32>,
    network: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx {
    fn default() -> &'a CardanoSignTx {
        <CardanoSignTx as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx {
    pub fn new() -> CardanoSignTx {
        ::std::default::Default::default()
    }

    // repeated .hw.trezor.messages.cardano.CardanoSignTx.CardanoTxInputType inputs = 1;


    pub fn get_inputs(&self) -> &[CardanoSignTx_CardanoTxInputType] {
        &self.inputs
    }
    pub fn clear_inputs(&mut self) {
        self.inputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_inputs(&mut self, v: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxInputType>) {
        self.inputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inputs(&mut self) -> &mut ::protobuf::RepeatedField<CardanoSignTx_CardanoTxInputType> {
        &mut self.inputs
    }

    // Take field
    pub fn take_inputs(&mut self) -> ::protobuf::RepeatedField<CardanoSignTx_CardanoTxInputType> {
        ::std::mem::replace(&mut self.inputs, ::protobuf::RepeatedField::new())
    }

    // repeated .hw.trezor.messages.cardano.CardanoSignTx.CardanoTxOutputType outputs = 2;


    pub fn get_outputs(&self) -> &[CardanoSignTx_CardanoTxOutputType] {
        &self.outputs
    }
    pub fn clear_outputs(&mut self) {
        self.outputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_outputs(&mut self, v: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxOutputType>) {
        self.outputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outputs(&mut self) -> &mut ::protobuf::RepeatedField<CardanoSignTx_CardanoTxOutputType> {
        &mut self.outputs
    }

    // Take field
    pub fn take_outputs(&mut self) -> ::protobuf::RepeatedField<CardanoSignTx_CardanoTxOutputType> {
        ::std::mem::replace(&mut self.outputs, ::protobuf::RepeatedField::new())
    }

    // optional uint32 transactions_count = 3;


    pub fn get_transactions_count(&self) -> u32 {
        self.transactions_count.unwrap_or(0)
    }
    pub fn clear_transactions_count(&mut self) {
        self.transactions_count = ::std::option::Option::None;
    }

    pub fn has_transactions_count(&self) -> bool {
        self.transactions_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transactions_count(&mut self, v: u32) {
        self.transactions_count = ::std::option::Option::Some(v);
    }

    // optional uint32 network = 4;


    pub fn get_network(&self) -> u32 {
        self.network.unwrap_or(0)
    }
    pub fn clear_network(&mut self) {
        self.network = ::std::option::Option::None;
    }

    pub fn has_network(&self) -> bool {
        self.network.is_some()
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: u32) {
        self.network = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoSignTx {
    fn is_initialized(&self) -> bool {
        for v in &self.inputs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.outputs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inputs)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.outputs)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.transactions_count = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.network = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.transactions_count {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.network {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.inputs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.outputs {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.transactions_count {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.network {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx {
        CardanoSignTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoSignTx_CardanoTxInputType>>(
                    "inputs",
                    |m: &CardanoSignTx| { &m.inputs },
                    |m: &mut CardanoSignTx| { &mut m.inputs },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoSignTx_CardanoTxOutputType>>(
                    "outputs",
                    |m: &CardanoSignTx| { &m.outputs },
                    |m: &mut CardanoSignTx| { &mut m.outputs },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "transactions_count",
                    |m: &CardanoSignTx| { &m.transactions_count },
                    |m: &mut CardanoSignTx| { &mut m.transactions_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "network",
                    |m: &CardanoSignTx| { &m.network },
                    |m: &mut CardanoSignTx| { &mut m.network },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CardanoSignTx>(
                    "CardanoSignTx",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CardanoSignTx {
        static mut instance: ::protobuf::lazy::Lazy<CardanoSignTx> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CardanoSignTx,
        };
        unsafe {
            instance.get(CardanoSignTx::new)
        }
    }
}

impl ::protobuf::Clear for CardanoSignTx {
    fn clear(&mut self) {
        self.inputs.clear();
        self.outputs.clear();
        self.transactions_count = ::std::option::Option::None;
        self.network = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx_CardanoTxInputType {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    prev_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    prev_index: ::std::option::Option<u32>,
    field_type: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx_CardanoTxInputType {
    fn default() -> &'a CardanoSignTx_CardanoTxInputType {
        <CardanoSignTx_CardanoTxInputType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx_CardanoTxInputType {
    pub fn new() -> CardanoSignTx_CardanoTxInputType {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bytes prev_hash = 2;


    pub fn get_prev_hash(&self) -> &[u8] {
        match self.prev_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_prev_hash(&mut self) {
        self.prev_hash.clear();
    }

    pub fn has_prev_hash(&self) -> bool {
        self.prev_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prev_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.prev_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prev_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.prev_hash.is_none() {
            self.prev_hash.set_default();
        }
        self.prev_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_prev_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.prev_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 prev_index = 3;


    pub fn get_prev_index(&self) -> u32 {
        self.prev_index.unwrap_or(0)
    }
    pub fn clear_prev_index(&mut self) {
        self.prev_index = ::std::option::Option::None;
    }

    pub fn has_prev_index(&self) -> bool {
        self.prev_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prev_index(&mut self, v: u32) {
        self.prev_index = ::std::option::Option::Some(v);
    }

    // optional uint32 type = 4;


    pub fn get_field_type(&self) -> u32 {
        self.field_type.unwrap_or(0)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: u32) {
        self.field_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoSignTx_CardanoTxInputType {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.prev_hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.prev_index = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.field_type = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.prev_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.prev_index {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.prev_hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.prev_index {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.field_type {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx_CardanoTxInputType {
        CardanoSignTx_CardanoTxInputType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &CardanoSignTx_CardanoTxInputType| { &m.address_n },
                    |m: &mut CardanoSignTx_CardanoTxInputType| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "prev_hash",
                    |m: &CardanoSignTx_CardanoTxInputType| { &m.prev_hash },
                    |m: &mut CardanoSignTx_CardanoTxInputType| { &mut m.prev_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "prev_index",
                    |m: &CardanoSignTx_CardanoTxInputType| { &m.prev_index },
                    |m: &mut CardanoSignTx_CardanoTxInputType| { &mut m.prev_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "type",
                    |m: &CardanoSignTx_CardanoTxInputType| { &m.field_type },
                    |m: &mut CardanoSignTx_CardanoTxInputType| { &mut m.field_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CardanoSignTx_CardanoTxInputType>(
                    "CardanoSignTx_CardanoTxInputType",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CardanoSignTx_CardanoTxInputType {
        static mut instance: ::protobuf::lazy::Lazy<CardanoSignTx_CardanoTxInputType> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CardanoSignTx_CardanoTxInputType,
        };
        unsafe {
            instance.get(CardanoSignTx_CardanoTxInputType::new)
        }
    }
}

impl ::protobuf::Clear for CardanoSignTx_CardanoTxInputType {
    fn clear(&mut self) {
        self.address_n.clear();
        self.prev_hash.clear();
        self.prev_index = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx_CardanoTxInputType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx_CardanoTxInputType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx_CardanoTxOutputType {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    address_n: ::std::vec::Vec<u32>,
    amount: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx_CardanoTxOutputType {
    fn default() -> &'a CardanoSignTx_CardanoTxOutputType {
        <CardanoSignTx_CardanoTxOutputType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx_CardanoTxOutputType {
    pub fn new() -> CardanoSignTx_CardanoTxOutputType {
        ::std::default::Default::default()
    }

    // optional string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated uint32 address_n = 2;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional uint64 amount = 3;


    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoSignTx_CardanoTxOutputType {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.address_n {
            os.write_uint32(2, *v)?;
        };
        if let Some(v) = self.amount {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx_CardanoTxOutputType {
        CardanoSignTx_CardanoTxOutputType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &CardanoSignTx_CardanoTxOutputType| { &m.address },
                    |m: &mut CardanoSignTx_CardanoTxOutputType| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &CardanoSignTx_CardanoTxOutputType| { &m.address_n },
                    |m: &mut CardanoSignTx_CardanoTxOutputType| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &CardanoSignTx_CardanoTxOutputType| { &m.amount },
                    |m: &mut CardanoSignTx_CardanoTxOutputType| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CardanoSignTx_CardanoTxOutputType>(
                    "CardanoSignTx_CardanoTxOutputType",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CardanoSignTx_CardanoTxOutputType {
        static mut instance: ::protobuf::lazy::Lazy<CardanoSignTx_CardanoTxOutputType> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CardanoSignTx_CardanoTxOutputType,
        };
        unsafe {
            instance.get(CardanoSignTx_CardanoTxOutputType::new)
        }
    }
}

impl ::protobuf::Clear for CardanoSignTx_CardanoTxOutputType {
    fn clear(&mut self) {
        self.address.clear();
        self.address_n.clear();
        self.amount = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx_CardanoTxOutputType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx_CardanoTxOutputType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxRequest {
    // message fields
    tx_index: ::std::option::Option<u32>,
    tx_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    tx_body: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxRequest {
    fn default() -> &'a CardanoTxRequest {
        <CardanoTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxRequest {
    pub fn new() -> CardanoTxRequest {
        ::std::default::Default::default()
    }

    // optional uint32 tx_index = 1;


    pub fn get_tx_index(&self) -> u32 {
        self.tx_index.unwrap_or(0)
    }
    pub fn clear_tx_index(&mut self) {
        self.tx_index = ::std::option::Option::None;
    }

    pub fn has_tx_index(&self) -> bool {
        self.tx_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_index(&mut self, v: u32) {
        self.tx_index = ::std::option::Option::Some(v);
    }

    // optional bytes tx_hash = 2;


    pub fn get_tx_hash(&self) -> &[u8] {
        match self.tx_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_tx_hash(&mut self) {
        self.tx_hash.clear();
    }

    pub fn has_tx_hash(&self) -> bool {
        self.tx_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tx_hash.is_none() {
            self.tx_hash.set_default();
        }
        self.tx_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.tx_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes tx_body = 3;


    pub fn get_tx_body(&self) -> &[u8] {
        match self.tx_body.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_tx_body(&mut self) {
        self.tx_body.clear();
    }

    pub fn has_tx_body(&self) -> bool {
        self.tx_body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_body = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tx_body.is_none() {
            self.tx_body.set_default();
        }
        self.tx_body.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_body(&mut self) -> ::std::vec::Vec<u8> {
        self.tx_body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoTxRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tx_index = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.tx_hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.tx_body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.tx_index {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.tx_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.tx_body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.tx_index {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.tx_hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.tx_body.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxRequest {
        CardanoTxRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "tx_index",
                    |m: &CardanoTxRequest| { &m.tx_index },
                    |m: &mut CardanoTxRequest| { &mut m.tx_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "tx_hash",
                    |m: &CardanoTxRequest| { &m.tx_hash },
                    |m: &mut CardanoTxRequest| { &mut m.tx_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "tx_body",
                    |m: &CardanoTxRequest| { &m.tx_body },
                    |m: &mut CardanoTxRequest| { &mut m.tx_body },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CardanoTxRequest>(
                    "CardanoTxRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CardanoTxRequest {
        static mut instance: ::protobuf::lazy::Lazy<CardanoTxRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CardanoTxRequest,
        };
        unsafe {
            instance.get(CardanoTxRequest::new)
        }
    }
}

impl ::protobuf::Clear for CardanoTxRequest {
    fn clear(&mut self) {
        self.tx_index = ::std::option::Option::None;
        self.tx_hash.clear();
        self.tx_body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxAck {
    // message fields
    transaction: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxAck {
    fn default() -> &'a CardanoTxAck {
        <CardanoTxAck as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxAck {
    pub fn new() -> CardanoTxAck {
        ::std::default::Default::default()
    }

    // optional bytes transaction = 1;


    pub fn get_transaction(&self) -> &[u8] {
        match self.transaction.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoTxAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.transaction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transaction.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxAck {
        CardanoTxAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction",
                    |m: &CardanoTxAck| { &m.transaction },
                    |m: &mut CardanoTxAck| { &mut m.transaction },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CardanoTxAck>(
                    "CardanoTxAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CardanoTxAck {
        static mut instance: ::protobuf::lazy::Lazy<CardanoTxAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CardanoTxAck,
        };
        unsafe {
            instance.get(CardanoTxAck::new)
        }
    }
}

impl ::protobuf::Clear for CardanoTxAck {
    fn clear(&mut self) {
        self.transaction.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignedTx {
    // message fields
    tx_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    tx_body: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignedTx {
    fn default() -> &'a CardanoSignedTx {
        <CardanoSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignedTx {
    pub fn new() -> CardanoSignedTx {
        ::std::default::Default::default()
    }

    // optional bytes tx_hash = 1;


    pub fn get_tx_hash(&self) -> &[u8] {
        match self.tx_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_tx_hash(&mut self) {
        self.tx_hash.clear();
    }

    pub fn has_tx_hash(&self) -> bool {
        self.tx_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tx_hash.is_none() {
            self.tx_hash.set_default();
        }
        self.tx_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.tx_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes tx_body = 2;


    pub fn get_tx_body(&self) -> &[u8] {
        match self.tx_body.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_tx_body(&mut self) {
        self.tx_body.clear();
    }

    pub fn has_tx_body(&self) -> bool {
        self.tx_body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_body = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tx_body.is_none() {
            self.tx_body.set_default();
        }
        self.tx_body.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_body(&mut self) -> ::std::vec::Vec<u8> {
        self.tx_body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoSignedTx {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.tx_hash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.tx_body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.tx_body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx_hash.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.tx_body.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignedTx {
        CardanoSignedTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "tx_hash",
                    |m: &CardanoSignedTx| { &m.tx_hash },
                    |m: &mut CardanoSignedTx| { &mut m.tx_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "tx_body",
                    |m: &CardanoSignedTx| { &m.tx_body },
                    |m: &mut CardanoSignedTx| { &mut m.tx_body },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CardanoSignedTx>(
                    "CardanoSignedTx",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CardanoSignedTx {
        static mut instance: ::protobuf::lazy::Lazy<CardanoSignedTx> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CardanoSignedTx,
        };
        unsafe {
            instance.get(CardanoSignedTx::new)
        }
    }
}

impl ::protobuf::Clear for CardanoSignedTx {
    fn clear(&mut self) {
        self.tx_hash.clear();
        self.tx_body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignedTx {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16messages-cardano.proto\x12\x1ahw.trezor.messages.cardano\x1a\x15me\
    ssages-common.proto\"S\n\x11CardanoGetAddress\x12\x1b\n\taddress_n\x18\
    \x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\x02\x20\x01(\x08\
    R\x0bshowDisplay\"*\n\x0eCardanoAddress\x12\x18\n\x07address\x18\x01\x20\
    \x01(\tR\x07address\"U\n\x13CardanoGetPublicKey\x12\x1b\n\taddress_n\x18\
    \x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\x02\x20\x01(\x08\
    R\x0bshowDisplay\"a\n\x10CardanoPublicKey\x12\x12\n\x04xpub\x18\x01\x20\
    \x01(\tR\x04xpub\x129\n\x04node\x18\x02\x20\x01(\x0b2%.hw.trezor.message\
    s.common.HDNodeTypeR\x04node\"\xf1\x03\n\rCardanoSignTx\x12T\n\x06inputs\
    \x18\x01\x20\x03(\x0b2<.hw.trezor.messages.cardano.CardanoSignTx.Cardano\
    TxInputTypeR\x06inputs\x12W\n\x07outputs\x18\x02\x20\x03(\x0b2=.hw.trezo\
    r.messages.cardano.CardanoSignTx.CardanoTxOutputTypeR\x07outputs\x12-\n\
    \x12transactions_count\x18\x03\x20\x01(\rR\x11transactionsCount\x12\x18\
    \n\x07network\x18\x04\x20\x01(\rR\x07network\x1a\x81\x01\n\x12CardanoTxI\
    nputType\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12\x1b\n\
    \tprev_hash\x18\x02\x20\x01(\x0cR\x08prevHash\x12\x1d\n\nprev_index\x18\
    \x03\x20\x01(\rR\tprevIndex\x12\x12\n\x04type\x18\x04\x20\x01(\rR\x04typ\
    e\x1ad\n\x13CardanoTxOutputType\x12\x18\n\x07address\x18\x01\x20\x01(\tR\
    \x07address\x12\x1b\n\taddress_n\x18\x02\x20\x03(\rR\x08addressN\x12\x16\
    \n\x06amount\x18\x03\x20\x01(\x04R\x06amount\"_\n\x10CardanoTxRequest\
    \x12\x19\n\x08tx_index\x18\x01\x20\x01(\rR\x07txIndex\x12\x17\n\x07tx_ha\
    sh\x18\x02\x20\x01(\x0cR\x06txHash\x12\x17\n\x07tx_body\x18\x03\x20\x01(\
    \x0cR\x06txBody\"0\n\x0cCardanoTxAck\x12\x20\n\x0btransaction\x18\x01\
    \x20\x01(\x0cR\x0btransaction\"C\n\x0fCardanoSignedTx\x12\x17\n\x07tx_ha\
    sh\x18\x01\x20\x01(\x0cR\x06txHash\x12\x17\n\x07tx_body\x18\x02\x20\x01(\
    \x0cR\x06txBodyB;\n#com.satoshilabs.trezor.lib.protobufB\x14TrezorMessag\
    eCardanoJ\xb4\x1e\n\x06\x12\x04\0\0j\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x01\x08\"\n\x08\n\x01\x08\x12\x03\x04\0<\n.\n\
    \x02\x08\x01\x12\x03\x04\0<\x1a#\x20Sugar\x20for\x20easier\x20handling\
    \x20in\x20Java\n\n\x08\n\x01\x08\x12\x03\x05\05\n\t\n\x02\x08\x08\x12\
    \x03\x05\05\n\t\n\x02\x03\0\x12\x03\x07\x07\x1e\nd\n\x02\x04\0\x12\x04\
    \x0f\0\x12\x01\x1aX*\n\x20Request:\x20Ask\x20device\x20for\x20Cardano\
    \x20address\n\x20@start\n\x20@next\x20CardanoAddress\n\x20@next\x20Failu\
    re\n\n\n\n\x03\x04\0\x01\x12\x03\x0f\x08\x19\nC\n\x04\x04\0\x02\0\x12\
    \x03\x10\x04\"\"6\x20BIP-32-style\x20path\x20to\x20derive\x20the\x20key\
    \x20from\x20master\x20node\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x10\x04\
    \x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x10\r\x13\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x10\x14\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x20!\
    \nC\n\x04\x04\0\x02\x01\x12\x03\x11\x04#\"6\x20optionally\x20prompt\x20f\
    or\x20confirmation\x20on\x20trezor\x20display\n\n\x0c\n\x05\x04\0\x02\
    \x01\x04\x12\x03\x11\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x11\r\
    \x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x11\x12\x1e\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x11!\"\n=\n\x02\x04\x01\x12\x04\x18\0\x1a\x01\x1a1*\
    \n\x20Request:\x20Ask\x20device\x20for\x20Cardano\x20address\n\x20@end\n\
    \n\n\n\x03\x04\x01\x01\x12\x03\x18\x08\x16\n%\n\x04\x04\x01\x02\0\x12\
    \x03\x19\x04\x20\"\x18\x20Base58\x20cardano\x20address\n\n\x0c\n\x05\x04\
    \x01\x02\0\x04\x12\x03\x19\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\
    \x19\r\x13\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x19\x14\x1b\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x19\x1e\x1f\n\x81\x01\n\x02\x04\x02\x12\x04\"\
    \0%\x01\x1au*\n\x20Request:\x20Ask\x20device\x20for\x20public\x20key\x20\
    corresponding\x20to\x20address_n\x20path\n\x20@start\n\x20@next\x20Carda\
    noPublicKey\n\x20@next\x20Failure\n\n\n\n\x03\x04\x02\x01\x12\x03\"\x08\
    \x1b\n=\n\x04\x04\x02\x02\0\x12\x03#\x04\"\"0\x20BIP-32\x20path\x20to\
    \x20derive\x20the\x20key\x20from\x20master\x20node\n\n\x0c\n\x05\x04\x02\
    \x02\0\x04\x12\x03#\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03#\r\x13\
    \n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03#\x14\x1d\n\x0c\n\x05\x04\x02\x02\
    \0\x03\x12\x03#\x20!\nC\n\x04\x04\x02\x02\x01\x12\x03$\x04#\"6\x20option\
    ally\x20show\x20on\x20display\x20before\x20sending\x20the\x20result\n\n\
    \x0c\n\x05\x04\x02\x02\x01\x04\x12\x03$\x04\x0c\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x03$\r\x11\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03$\x12\x1e\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03$!\"\nT\n\x02\x04\x03\x12\x04+\0\
    .\x01\x1aH*\n\x20Response:\x20Contains\x20public\x20key\x20derived\x20fr\
    om\x20device\x20private\x20seed\n\x20@end\n\n\n\n\x03\x04\x03\x01\x12\
    \x03+\x08\x18\n\x17\n\x04\x04\x03\x02\0\x12\x03,\x04\x1d\"\n\x20Xpub\x20\
    key\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03,\x04\x0c\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03,\r\x13\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03,\x14\x18\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03,\x1b\x1c\n!\n\x04\x04\x03\x02\x01\
    \x12\x03-\x04;\"\x14\x20BIP-32\x20public\x20node\n\n\x0c\n\x05\x04\x03\
    \x02\x01\x04\x12\x03-\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03-\r\
    1\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03-26\n\x0c\n\x05\x04\x03\x02\x01\
    \x03\x12\x03-9:\n\x85\x01\n\x02\x04\x04\x12\x047\0M\x01\x1ay*\n\x20Reque\
    st:\x20Ask\x20device\x20to\x20sign\x20Cardano\x20transaction\n\x20@start\
    \n\x20@next\x20CardanoSignedTx\n\x20@next\x20CardanoTxRequest\n\x20@next\
    \x20Failure\n\n\n\n\x03\x04\x04\x01\x12\x037\x08\x15\n/\n\x04\x04\x04\
    \x02\0\x12\x038\x04+\"\"\x20inputs\x20to\x20be\x20used\x20in\x20transact\
    ion\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x038\x04\x0c\n\x0c\n\x05\x04\x04\
    \x02\0\x06\x12\x038\r\x1f\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x038\x20&\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x038)*\n0\n\x04\x04\x04\x02\x01\x12\x03\
    9\x04-\"#\x20outputs\x20to\x20be\x20used\x20in\x20transaction\n\n\x0c\n\
    \x05\x04\x04\x02\x01\x04\x12\x039\x04\x0c\n\x0c\n\x05\x04\x04\x02\x01\
    \x06\x12\x039\r\x20\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x039!(\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x039+,\n!\n\x04\x04\x04\x02\x02\x12\x03:\
    \x04+\"\x14\x20transactions\x20count\n\n\x0c\n\x05\x04\x04\x02\x02\x04\
    \x12\x03:\x04\x0c\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03:\r\x13\n\x0c\n\
    \x05\x04\x04\x02\x02\x01\x12\x03:\x14&\n\x0c\n\x05\x04\x04\x02\x02\x03\
    \x12\x03:)*\n\x1d\n\x04\x04\x04\x02\x03\x12\x03;\x04\x20\"\x10\x20networ\
    k\x20number\n\n\x0c\n\x05\x04\x04\x02\x03\x04\x12\x03;\x04\x0c\n\x0c\n\
    \x05\x04\x04\x02\x03\x05\x12\x03;\r\x13\n\x0c\n\x05\x04\x04\x02\x03\x01\
    \x12\x03;\x14\x1b\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03;\x1e\x1f\nB\n\
    \x04\x04\x04\x03\0\x12\x04?\x04D\x05\x1a4*\n\x20Structure\x20representin\
    g\x20cardano\x20transaction\x20input\n\n\x0c\n\x05\x04\x04\x03\0\x01\x12\
    \x03?\x0c\x1e\n?\n\x06\x04\x04\x03\0\x02\0\x12\x03@\x08&\"0\x20BIP-32\
    \x20path\x20to\x20derive\x20the\x20key\x20from\x20master\x20node\n\n\x0e\
    \n\x07\x04\x04\x03\0\x02\0\x04\x12\x03@\x08\x10\n\x0e\n\x07\x04\x04\x03\
    \0\x02\0\x05\x12\x03@\x11\x17\n\x0e\n\x07\x04\x04\x03\0\x02\0\x01\x12\
    \x03@\x18!\n\x0e\n\x07\x04\x04\x03\0\x02\0\x03\x12\x03@$%\nK\n\x06\x04\
    \x04\x03\0\x02\x01\x12\x03A\x08%\"<\x20hash\x20of\x20previous\x20transac\
    tion\x20output\x20to\x20spend\x20by\x20this\x20input\n\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x01\x04\x12\x03A\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\
    \x01\x05\x12\x03A\x11\x16\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x01\x12\x03A\
    \x17\x20\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x03\x12\x03A#$\n2\n\x06\x04\
    \x04\x03\0\x02\x02\x12\x03B\x08'\"#\x20index\x20of\x20previous\x20output\
    \x20to\x20spend\n\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x04\x12\x03B\x08\x10\
    \n\x0e\n\x07\x04\x04\x03\0\x02\x02\x05\x12\x03B\x11\x17\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x02\x01\x12\x03B\x18\"\n\x0e\n\x07\x04\x04\x03\0\x02\x02\
    \x03\x12\x03B%&\n*\n\x06\x04\x04\x03\0\x02\x03\x12\x03C\x08!\"\x1b\x20in\
    put\x20type,\x20defaults\x20to\x200\n\n\x0e\n\x07\x04\x04\x03\0\x02\x03\
    \x04\x12\x03C\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\x03\x05\x12\x03C\x11\
    \x17\n\x0e\n\x07\x04\x04\x03\0\x02\x03\x01\x12\x03C\x18\x1c\n\x0e\n\x07\
    \x04\x04\x03\0\x02\x03\x03\x12\x03C\x1f\x20\nC\n\x04\x04\x04\x03\x01\x12\
    \x04H\x04L\x05\x1a5*\n\x20Structure\x20representing\x20cardano\x20transa\
    ction\x20output\n\n\x0c\n\x05\x04\x04\x03\x01\x01\x12\x03H\x0c\x1f\n7\n\
    \x06\x04\x04\x03\x01\x02\0\x12\x03I\x08$\"(\x20target\x20coin\x20address\
    \x20in\x20Base58\x20encoding\n\n\x0e\n\x07\x04\x04\x03\x01\x02\0\x04\x12\
    \x03I\x08\x10\n\x0e\n\x07\x04\x04\x03\x01\x02\0\x05\x12\x03I\x11\x17\n\
    \x0e\n\x07\x04\x04\x03\x01\x02\0\x01\x12\x03I\x18\x1f\n\x0e\n\x07\x04\
    \x04\x03\x01\x02\0\x03\x12\x03I\"#\nc\n\x06\x04\x04\x03\x01\x02\x01\x12\
    \x03J\x08&\"T\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20from\
    \x20master\x20node;\x20has\x20higher\x20priority\x20than\x20\"address\"\
    \n\n\x0e\n\x07\x04\x04\x03\x01\x02\x01\x04\x12\x03J\x08\x10\n\x0e\n\x07\
    \x04\x04\x03\x01\x02\x01\x05\x12\x03J\x11\x17\n\x0e\n\x07\x04\x04\x03\
    \x01\x02\x01\x01\x12\x03J\x18!\n\x0e\n\x07\x04\x04\x03\x01\x02\x01\x03\
    \x12\x03J$%\n\x20\n\x06\x04\x04\x03\x01\x02\x02\x12\x03K\x08#\"\x11\x20a\
    mount\x20to\x20spend\n\n\x0e\n\x07\x04\x04\x03\x01\x02\x02\x04\x12\x03K\
    \x08\x10\n\x0e\n\x07\x04\x04\x03\x01\x02\x02\x05\x12\x03K\x11\x17\n\x0e\
    \n\x07\x04\x04\x03\x01\x02\x02\x01\x12\x03K\x18\x1e\n\x0e\n\x07\x04\x04\
    \x03\x01\x02\x02\x03\x12\x03K!\"\n\xbb\x01\n\x02\x04\x05\x12\x04T\0X\x01\
    \x1a\xae\x01*\n\x20Response:\x20Serialised\x20signed\x20cardano\x20trans\
    action\x20if\x20tx_index\x20is\x20not\x20specified.\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20If\x20tx_index\x20is\x20specifie\
    d,\x20trezor\x20will\x20wait\x20for\x20transaction\n\x20@next\x20Cardano\
    TxAck\n\n\n\n\x03\x04\x05\x01\x12\x03T\x08\x18\n-\n\x04\x04\x05\x02\0\
    \x12\x03U\x04!\"\x20\x20index\x20of\x20requested\x20transaction\n\n\x0c\
    \n\x05\x04\x05\x02\0\x04\x12\x03U\x04\x0c\n\x0c\n\x05\x04\x05\x02\0\x05\
    \x12\x03U\r\x13\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03U\x14\x1c\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x03U\x1f\x20\n-\n\x04\x04\x05\x02\x01\x12\x03\
    V\x04\x1f\"\x20\x20hash\x20of\x20the\x20signed\x20transaction\n\n\x0c\n\
    \x05\x04\x05\x02\x01\x04\x12\x03V\x04\x0c\n\x0c\n\x05\x04\x05\x02\x01\
    \x05\x12\x03V\r\x12\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03V\x13\x1a\n\
    \x0c\n\x05\x04\x05\x02\x01\x03\x12\x03V\x1d\x1e\n8\n\x04\x04\x05\x02\x02\
    \x12\x03W\x04\x1f\"+\x20serialised\x20body\x20of\x20the\x20signed\x20tra\
    nsaction\n\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03W\x04\x0c\n\x0c\n\x05\
    \x04\x05\x02\x02\x05\x12\x03W\r\x12\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\
    \x03W\x13\x1a\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03W\x1d\x1e\na\n\x02\
    \x04\x06\x12\x04_\0a\x01\x1aU*\n\x20Request:\x20Reported\x20transaction\
    \x20data\n\x20@next\x20CardanoSignedTx\n\x20@next\x20CardanoTxRequest\n\
    \n\n\n\x03\x04\x06\x01\x12\x03_\x08\x14\n\x0b\n\x04\x04\x06\x02\0\x12\
    \x03`\x04#\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03`\x04\x0c\n\x0c\n\x05\
    \x04\x06\x02\0\x05\x12\x03`\r\x12\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03`\
    \x13\x1e\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03`!\"\nE\n\x02\x04\x07\x12\
    \x04g\0j\x01\x1a9*\n\x20Response:\x20Serialised\x20signed\x20cardano\x20\
    transaction\n\x20@end\n\n\n\n\x03\x04\x07\x01\x12\x03g\x08\x17\n-\n\x04\
    \x04\x07\x02\0\x12\x03h\x04\x1f\"\x20\x20hash\x20of\x20the\x20signed\x20\
    transaction\n\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03h\x04\x0c\n\x0c\n\x05\
    \x04\x07\x02\0\x05\x12\x03h\r\x12\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03h\
    \x13\x1a\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03h\x1d\x1e\n8\n\x04\x04\x07\
    \x02\x01\x12\x03i\x04\x1f\"+\x20serialised\x20body\x20of\x20the\x20signe\
    d\x20transaction\n\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03i\x04\x0c\n\
    \x0c\n\x05\x04\x07\x02\x01\x05\x12\x03i\r\x12\n\x0c\n\x05\x04\x07\x02\
    \x01\x01\x12\x03i\x13\x1a\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03i\x1d\
    \x1e\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
