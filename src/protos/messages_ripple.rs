// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages-ripple.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct RippleGetAddress {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RippleGetAddress {
    fn default() -> &'a RippleGetAddress {
        <RippleGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl RippleGetAddress {
    pub fn new() -> RippleGetAddress {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RippleGetAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RippleGetAddress {
        RippleGetAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &RippleGetAddress| { &m.address_n },
                    |m: &mut RippleGetAddress| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "show_display",
                    |m: &RippleGetAddress| { &m.show_display },
                    |m: &mut RippleGetAddress| { &mut m.show_display },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RippleGetAddress>(
                    "RippleGetAddress",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RippleGetAddress {
        static mut instance: ::protobuf::lazy::Lazy<RippleGetAddress> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RippleGetAddress,
        };
        unsafe {
            instance.get(RippleGetAddress::new)
        }
    }
}

impl ::protobuf::Clear for RippleGetAddress {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RippleGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RippleGetAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RippleAddress {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RippleAddress {
    fn default() -> &'a RippleAddress {
        <RippleAddress as ::protobuf::Message>::default_instance()
    }
}

impl RippleAddress {
    pub fn new() -> RippleAddress {
        ::std::default::Default::default()
    }

    // optional string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for RippleAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RippleAddress {
        RippleAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &RippleAddress| { &m.address },
                    |m: &mut RippleAddress| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RippleAddress>(
                    "RippleAddress",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RippleAddress {
        static mut instance: ::protobuf::lazy::Lazy<RippleAddress> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RippleAddress,
        };
        unsafe {
            instance.get(RippleAddress::new)
        }
    }
}

impl ::protobuf::Clear for RippleAddress {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RippleAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RippleAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RippleSignTx {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    fee: ::std::option::Option<u64>,
    flags: ::std::option::Option<u32>,
    sequence: ::std::option::Option<u32>,
    last_ledger_sequence: ::std::option::Option<u32>,
    payment: ::protobuf::SingularPtrField<RippleSignTx_RipplePayment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RippleSignTx {
    fn default() -> &'a RippleSignTx {
        <RippleSignTx as ::protobuf::Message>::default_instance()
    }
}

impl RippleSignTx {
    pub fn new() -> RippleSignTx {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional uint64 fee = 2;


    pub fn get_fee(&self) -> u64 {
        self.fee.unwrap_or(0)
    }
    pub fn clear_fee(&mut self) {
        self.fee = ::std::option::Option::None;
    }

    pub fn has_fee(&self) -> bool {
        self.fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee(&mut self, v: u64) {
        self.fee = ::std::option::Option::Some(v);
    }

    // optional uint32 flags = 3;


    pub fn get_flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }
    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional uint32 sequence = 4;


    pub fn get_sequence(&self) -> u32 {
        self.sequence.unwrap_or(0)
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = ::std::option::Option::None;
    }

    pub fn has_sequence(&self) -> bool {
        self.sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u32) {
        self.sequence = ::std::option::Option::Some(v);
    }

    // optional uint32 last_ledger_sequence = 5;


    pub fn get_last_ledger_sequence(&self) -> u32 {
        self.last_ledger_sequence.unwrap_or(0)
    }
    pub fn clear_last_ledger_sequence(&mut self) {
        self.last_ledger_sequence = ::std::option::Option::None;
    }

    pub fn has_last_ledger_sequence(&self) -> bool {
        self.last_ledger_sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_ledger_sequence(&mut self, v: u32) {
        self.last_ledger_sequence = ::std::option::Option::Some(v);
    }

    // optional .hw.trezor.messages.ripple.RippleSignTx.RipplePayment payment = 6;


    pub fn get_payment(&self) -> &RippleSignTx_RipplePayment {
        self.payment.as_ref().unwrap_or_else(|| RippleSignTx_RipplePayment::default_instance())
    }
    pub fn clear_payment(&mut self) {
        self.payment.clear();
    }

    pub fn has_payment(&self) -> bool {
        self.payment.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payment(&mut self, v: RippleSignTx_RipplePayment) {
        self.payment = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payment(&mut self) -> &mut RippleSignTx_RipplePayment {
        if self.payment.is_none() {
            self.payment.set_default();
        }
        self.payment.as_mut().unwrap()
    }

    // Take field
    pub fn take_payment(&mut self) -> RippleSignTx_RipplePayment {
        self.payment.take().unwrap_or_else(|| RippleSignTx_RipplePayment::new())
    }
}

impl ::protobuf::Message for RippleSignTx {
    fn is_initialized(&self) -> bool {
        for v in &self.payment {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.fee = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.flags = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sequence = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.last_ledger_sequence = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.payment)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.fee {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.sequence {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.last_ledger_sequence {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.payment.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.fee {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.sequence {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.last_ledger_sequence {
            os.write_uint32(5, v)?;
        }
        if let Some(ref v) = self.payment.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RippleSignTx {
        RippleSignTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &RippleSignTx| { &m.address_n },
                    |m: &mut RippleSignTx| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "fee",
                    |m: &RippleSignTx| { &m.fee },
                    |m: &mut RippleSignTx| { &mut m.fee },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "flags",
                    |m: &RippleSignTx| { &m.flags },
                    |m: &mut RippleSignTx| { &mut m.flags },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "sequence",
                    |m: &RippleSignTx| { &m.sequence },
                    |m: &mut RippleSignTx| { &mut m.sequence },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "last_ledger_sequence",
                    |m: &RippleSignTx| { &m.last_ledger_sequence },
                    |m: &mut RippleSignTx| { &mut m.last_ledger_sequence },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RippleSignTx_RipplePayment>>(
                    "payment",
                    |m: &RippleSignTx| { &m.payment },
                    |m: &mut RippleSignTx| { &mut m.payment },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RippleSignTx>(
                    "RippleSignTx",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RippleSignTx {
        static mut instance: ::protobuf::lazy::Lazy<RippleSignTx> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RippleSignTx,
        };
        unsafe {
            instance.get(RippleSignTx::new)
        }
    }
}

impl ::protobuf::Clear for RippleSignTx {
    fn clear(&mut self) {
        self.address_n.clear();
        self.fee = ::std::option::Option::None;
        self.flags = ::std::option::Option::None;
        self.sequence = ::std::option::Option::None;
        self.last_ledger_sequence = ::std::option::Option::None;
        self.payment.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RippleSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RippleSignTx {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RippleSignTx_RipplePayment {
    // message fields
    amount: ::std::option::Option<u64>,
    destination: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RippleSignTx_RipplePayment {
    fn default() -> &'a RippleSignTx_RipplePayment {
        <RippleSignTx_RipplePayment as ::protobuf::Message>::default_instance()
    }
}

impl RippleSignTx_RipplePayment {
    pub fn new() -> RippleSignTx_RipplePayment {
        ::std::default::Default::default()
    }

    // optional uint64 amount = 1;


    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional string destination = 2;


    pub fn get_destination(&self) -> &str {
        match self.destination.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_destination(&mut self) {
        self.destination.clear();
    }

    pub fn has_destination(&self) -> bool {
        self.destination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: ::std::string::String) {
        self.destination = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination(&mut self) -> &mut ::std::string::String {
        if self.destination.is_none() {
            self.destination.set_default();
        }
        self.destination.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination(&mut self) -> ::std::string::String {
        self.destination.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for RippleSignTx_RipplePayment {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.destination)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.destination.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.amount {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.destination.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RippleSignTx_RipplePayment {
        RippleSignTx_RipplePayment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &RippleSignTx_RipplePayment| { &m.amount },
                    |m: &mut RippleSignTx_RipplePayment| { &mut m.amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "destination",
                    |m: &RippleSignTx_RipplePayment| { &m.destination },
                    |m: &mut RippleSignTx_RipplePayment| { &mut m.destination },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RippleSignTx_RipplePayment>(
                    "RippleSignTx_RipplePayment",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RippleSignTx_RipplePayment {
        static mut instance: ::protobuf::lazy::Lazy<RippleSignTx_RipplePayment> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RippleSignTx_RipplePayment,
        };
        unsafe {
            instance.get(RippleSignTx_RipplePayment::new)
        }
    }
}

impl ::protobuf::Clear for RippleSignTx_RipplePayment {
    fn clear(&mut self) {
        self.amount = ::std::option::Option::None;
        self.destination.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RippleSignTx_RipplePayment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RippleSignTx_RipplePayment {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RippleSignedTx {
    // message fields
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    serialized_tx: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RippleSignedTx {
    fn default() -> &'a RippleSignedTx {
        <RippleSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl RippleSignedTx {
    pub fn new() -> RippleSignedTx {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes serialized_tx = 2;


    pub fn get_serialized_tx(&self) -> &[u8] {
        match self.serialized_tx.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_serialized_tx(&mut self) {
        self.serialized_tx.clear();
    }

    pub fn has_serialized_tx(&self) -> bool {
        self.serialized_tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serialized_tx(&mut self, v: ::std::vec::Vec<u8>) {
        self.serialized_tx = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serialized_tx(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.serialized_tx.is_none() {
            self.serialized_tx.set_default();
        }
        self.serialized_tx.as_mut().unwrap()
    }

    // Take field
    pub fn take_serialized_tx(&mut self) -> ::std::vec::Vec<u8> {
        self.serialized_tx.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RippleSignedTx {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.serialized_tx)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.serialized_tx.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.serialized_tx.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RippleSignedTx {
        RippleSignedTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &RippleSignedTx| { &m.signature },
                    |m: &mut RippleSignedTx| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "serialized_tx",
                    |m: &RippleSignedTx| { &m.serialized_tx },
                    |m: &mut RippleSignedTx| { &mut m.serialized_tx },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RippleSignedTx>(
                    "RippleSignedTx",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RippleSignedTx {
        static mut instance: ::protobuf::lazy::Lazy<RippleSignedTx> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RippleSignedTx,
        };
        unsafe {
            instance.get(RippleSignedTx::new)
        }
    }
}

impl ::protobuf::Clear for RippleSignedTx {
    fn clear(&mut self) {
        self.signature.clear();
        self.serialized_tx.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RippleSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RippleSignedTx {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15messages-ripple.proto\x12\x19hw.trezor.messages.ripple\"R\n\x10Rip\
    pleGetAddress\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12!\
    \n\x0cshow_display\x18\x02\x20\x01(\x08R\x0bshowDisplay\")\n\rRippleAddr\
    ess\x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07address\"\xbd\x02\n\x0cR\
    ippleSignTx\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12\x10\
    \n\x03fee\x18\x02\x20\x01(\x04R\x03fee\x12\x14\n\x05flags\x18\x03\x20\
    \x01(\rR\x05flags\x12\x1a\n\x08sequence\x18\x04\x20\x01(\rR\x08sequence\
    \x120\n\x14last_ledger_sequence\x18\x05\x20\x01(\rR\x12lastLedgerSequenc\
    e\x12O\n\x07payment\x18\x06\x20\x01(\x0b25.hw.trezor.messages.ripple.Rip\
    pleSignTx.RipplePaymentR\x07payment\x1aI\n\rRipplePayment\x12\x16\n\x06a\
    mount\x18\x01\x20\x01(\x04R\x06amount\x12\x20\n\x0bdestination\x18\x02\
    \x20\x01(\tR\x0bdestination\"S\n\x0eRippleSignedTx\x12\x1c\n\tsignature\
    \x18\x01\x20\x01(\x0cR\tsignature\x12#\n\rserialized_tx\x18\x02\x20\x01(\
    \x0cR\x0cserializedTxB:\n#com.satoshilabs.trezor.lib.protobufB\x13Trezor\
    MessageRippleJ\xd3\x10\n\x06\x12\x04\0\09\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\x08\n\x01\x02\x12\x03\x01\x08!\n\x08\n\x01\x08\x12\x03\x04\0<\n\
    .\n\x02\x08\x01\x12\x03\x04\0<\x1a#\x20Sugar\x20for\x20easier\x20handlin\
    g\x20in\x20Java\n\n\x08\n\x01\x08\x12\x03\x05\04\n\t\n\x02\x08\x08\x12\
    \x03\x05\04\nT\n\x02\x04\0\x12\x04\x0c\0\x0f\x01\x1aH*\n\x20Request:\x20\
    Address\x20at\x20the\x20specified\x20index\n\x20@start\n\x20@next\x20Rip\
    pleAddress\n\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x18\n[\n\x04\x04\0\x02\
    \0\x12\x03\r\x08&\"N\x20BIP-32\x20path.\x20For\x20compatibility\x20with\
    \x20other\x20wallets,\x20must\x20be\x20m/44'/144'/index'\n\n\x0c\n\x05\
    \x04\0\x02\0\x04\x12\x03\r\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\r\
    \x11\x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\x18!\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\r$%\nC\n\x04\x04\0\x02\x01\x12\x03\x0e\x08'\"6\x20opt\
    ionally\x20show\x20on\x20display\x20before\x20sending\x20the\x20result\n\
    \n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0e\x08\x10\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x0e\x11\x15\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0e\
    \x16\"\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e%&\n;\n\x02\x04\x01\x12\
    \x04\x15\0\x17\x01\x1a/*\n\x20Response:\x20Address\x20for\x20the\x20give\
    n\x20index\n\x20@end\n\n\n\n\x03\x04\x01\x01\x12\x03\x15\x08\x15\nJ\n\
    \x04\x04\x01\x02\0\x12\x03\x16\x08$\"=\x20Address\x20in\x20Ripple\x20for\
    mat\x20(base58\x20of\x20a\x20pubkey\x20with\x20checksum)\n\n\x0c\n\x05\
    \x04\x01\x02\0\x04\x12\x03\x16\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\x16\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x16\x18\x1f\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\x16\"#\n\\\n\x02\x04\x02\x12\x04\x1e\00\
    \x01\x1aP*\n\x20Request:\x20ask\x20device\x20to\x20sign\x20Ripple\x20tra\
    nsaction\n\x20@start\n\x20@next\x20RippleSignedTx\n\n\n\n\x03\x04\x02\
    \x01\x12\x03\x1e\x08\x14\n[\n\x04\x04\x02\x02\0\x12\x03\x1f\x08&\"N\x20B\
    IP-32\x20path.\x20For\x20compatibility\x20with\x20other\x20wallets,\x20m\
    ust\x20be\x20m/44'/144'/index'\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\
    \x1f\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1f\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x1f\x18!\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x1f$%\n1\n\x04\x04\x02\x02\x01\x12\x03\x20\x08\x20\"$\x20fee\
    \x20(in\x20drops)\x20for\x20the\x20transaction\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x04\x12\x03\x20\x08\x10\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x20\
    \x11\x17\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x20\x18\x1b\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03\x20\x1e\x1f\n\x20\n\x04\x04\x02\x02\x02\x12\
    \x03!\x08\"\"\x13\x20transaction\x20flags\n\n\x0c\n\x05\x04\x02\x02\x02\
    \x04\x12\x03!\x08\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03!\x11\x17\n\
    \x0c\n\x05\x04\x02\x02\x02\x01\x12\x03!\x18\x1d\n\x0c\n\x05\x04\x02\x02\
    \x02\x03\x12\x03!\x20!\n*\n\x04\x04\x02\x02\x03\x12\x03\"\x08%\"\x1d\x20\
    transaction\x20sequence\x20number\n\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\
    \x03\"\x08\x10\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\"\x11\x17\n\x0c\n\
    \x05\x04\x02\x02\x03\x01\x12\x03\"\x18\x20\n\x0c\n\x05\x04\x02\x02\x03\
    \x03\x12\x03\"#$\nh\n\x04\x04\x02\x02\x04\x12\x03#\x081\"[\x20see\x20htt\
    ps://developers.ripple.com/reliable-transaction-submission.html#lastledg\
    ersequence\n\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03#\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\x04\x05\x12\x03#\x11\x17\n\x0c\n\x05\x04\x02\x02\x04\
    \x01\x12\x03#\x18,\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03#/0\n'\n\x04\
    \x04\x02\x02\x05\x12\x03$\x08+\"\x1a\x20Payment\x20transaction\x20type\n\
    \n\x0c\n\x05\x04\x02\x02\x05\x04\x12\x03$\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x05\x06\x12\x03$\x11\x1e\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03$\
    \x1f&\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03$)*\n\xa3\x01\n\x04\x04\x02\
    \x03\0\x12\x04,\x08/\t\x1a\x94\x01*\n\x20Payment\x20transaction\x20type\
    \n\x20-\x20simple\x20A\x20sends\x20money\x20to\x20B\n\x20-\x20only\x20a\
    \x20subset\x20of\x20fields\x20is\x20supported\n\x20-\x20see\x20https://d\
    evelopers.ripple.com/payment.html\x20\n\n\x0c\n\x05\x04\x02\x03\0\x01\
    \x12\x03,\x10\x1d\nG\n\x06\x04\x02\x03\0\x02\0\x12\x03-\x10+\"8\x20only\
    \x20XRP\x20is\x20supported\x20at\x20the\x20moment\x20so\x20this\x20an\
    \x20integer\n\n\x0e\n\x07\x04\x02\x03\0\x02\0\x04\x12\x03-\x10\x18\n\x0e\
    \n\x07\x04\x02\x03\0\x02\0\x05\x12\x03-\x19\x1f\n\x0e\n\x07\x04\x02\x03\
    \0\x02\0\x01\x12\x03-\x20&\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\x12\x03-)\
    *\n,\n\x06\x04\x02\x03\0\x02\x01\x12\x03.\x100\"\x1d\x20destination\x20a\
    ccount\x20address\n\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x04\x12\x03.\x10\
    \x18\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x05\x12\x03.\x19\x1f\n\x0e\n\x07\
    \x04\x02\x03\0\x02\x01\x01\x12\x03.\x20+\n\x0e\n\x07\x04\x02\x03\0\x02\
    \x01\x03\x12\x03../\n9\n\x02\x04\x03\x12\x046\09\x01\x1a-*\n\x20Response\
    :\x20signature\x20for\x20transaction\n\x20@end\n\n\n\n\x03\x04\x03\x01\
    \x12\x036\x08\x16\n\x0b\n\x04\x04\x03\x02\0\x12\x037\x08%\n\x0c\n\x05\
    \x04\x03\x02\0\x04\x12\x037\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x037\x11\x16\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x037\x17\x20\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x037#$\n\x0b\n\x04\x04\x03\x02\x01\x12\x038\x08)\
    \n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x038\x08\x10\n\x0c\n\x05\x04\x03\
    \x02\x01\x05\x12\x038\x11\x16\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x038\
    \x17$\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x038'(\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
