// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages-lisk.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct LiskGetAddress {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskGetAddress {
    fn default() -> &'a LiskGetAddress {
        <LiskGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl LiskGetAddress {
    pub fn new() -> LiskGetAddress {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for LiskGetAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskGetAddress {
        LiskGetAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &LiskGetAddress| { &m.address_n },
                |m: &mut LiskGetAddress| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_display",
                |m: &LiskGetAddress| { &m.show_display },
                |m: &mut LiskGetAddress| { &mut m.show_display },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskGetAddress>(
                "LiskGetAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskGetAddress {
        static instance: ::protobuf::rt::LazyV2<LiskGetAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskGetAddress::new)
    }
}

impl ::protobuf::Clear for LiskGetAddress {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskGetAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskAddress {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskAddress {
    fn default() -> &'a LiskAddress {
        <LiskAddress as ::protobuf::Message>::default_instance()
    }
}

impl LiskAddress {
    pub fn new() -> LiskAddress {
        ::std::default::Default::default()
    }

    // optional string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for LiskAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskAddress {
        LiskAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &LiskAddress| { &m.address },
                |m: &mut LiskAddress| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskAddress>(
                "LiskAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskAddress {
        static instance: ::protobuf::rt::LazyV2<LiskAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskAddress::new)
    }
}

impl ::protobuf::Clear for LiskAddress {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskGetPublicKey {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskGetPublicKey {
    fn default() -> &'a LiskGetPublicKey {
        <LiskGetPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl LiskGetPublicKey {
    pub fn new() -> LiskGetPublicKey {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for LiskGetPublicKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskGetPublicKey {
        LiskGetPublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &LiskGetPublicKey| { &m.address_n },
                |m: &mut LiskGetPublicKey| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_display",
                |m: &LiskGetPublicKey| { &m.show_display },
                |m: &mut LiskGetPublicKey| { &mut m.show_display },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskGetPublicKey>(
                "LiskGetPublicKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskGetPublicKey {
        static instance: ::protobuf::rt::LazyV2<LiskGetPublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskGetPublicKey::new)
    }
}

impl ::protobuf::Clear for LiskGetPublicKey {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskGetPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskGetPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskPublicKey {
    // message fields
    public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskPublicKey {
    fn default() -> &'a LiskPublicKey {
        <LiskPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl LiskPublicKey {
    pub fn new() -> LiskPublicKey {
        ::std::default::Default::default()
    }

    // optional bytes public_key = 1;


    pub fn get_public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LiskPublicKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskPublicKey {
        LiskPublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "public_key",
                |m: &LiskPublicKey| { &m.public_key },
                |m: &mut LiskPublicKey| { &mut m.public_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskPublicKey>(
                "LiskPublicKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskPublicKey {
        static instance: ::protobuf::rt::LazyV2<LiskPublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskPublicKey::new)
    }
}

impl ::protobuf::Clear for LiskPublicKey {
    fn clear(&mut self) {
        self.public_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskSignTx {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    pub transaction: ::protobuf::SingularPtrField<LiskSignTx_LiskTransactionCommon>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskSignTx {
    fn default() -> &'a LiskSignTx {
        <LiskSignTx as ::protobuf::Message>::default_instance()
    }
}

impl LiskSignTx {
    pub fn new() -> LiskSignTx {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon transaction = 2;


    pub fn get_transaction(&self) -> &LiskSignTx_LiskTransactionCommon {
        self.transaction.as_ref().unwrap_or_else(|| <LiskSignTx_LiskTransactionCommon as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: LiskSignTx_LiskTransactionCommon) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut LiskSignTx_LiskTransactionCommon {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> LiskSignTx_LiskTransactionCommon {
        self.transaction.take().unwrap_or_else(|| LiskSignTx_LiskTransactionCommon::new())
    }
}

impl ::protobuf::Message for LiskSignTx {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskSignTx {
        LiskSignTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &LiskSignTx| { &m.address_n },
                |m: &mut LiskSignTx| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LiskSignTx_LiskTransactionCommon>>(
                "transaction",
                |m: &LiskSignTx| { &m.transaction },
                |m: &mut LiskSignTx| { &mut m.transaction },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskSignTx>(
                "LiskSignTx",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskSignTx {
        static instance: ::protobuf::rt::LazyV2<LiskSignTx> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskSignTx::new)
    }
}

impl ::protobuf::Clear for LiskSignTx {
    fn clear(&mut self) {
        self.address_n.clear();
        self.transaction.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignTx {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskSignTx_LiskTransactionCommon {
    // message fields
    field_type: ::std::option::Option<LiskSignTx_LiskTransactionCommon_LiskTransactionType>,
    amount: ::std::option::Option<u64>,
    fee: ::std::option::Option<u64>,
    recipient_id: ::protobuf::SingularField<::std::string::String>,
    sender_public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    requester_public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    timestamp: ::std::option::Option<u32>,
    pub asset: ::protobuf::SingularPtrField<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskSignTx_LiskTransactionCommon {
    fn default() -> &'a LiskSignTx_LiskTransactionCommon {
        <LiskSignTx_LiskTransactionCommon as ::protobuf::Message>::default_instance()
    }
}

impl LiskSignTx_LiskTransactionCommon {
    pub fn new() -> LiskSignTx_LiskTransactionCommon {
        ::std::default::Default::default()
    }

    // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType type = 1;


    pub fn get_field_type(&self) -> LiskSignTx_LiskTransactionCommon_LiskTransactionType {
        self.field_type.unwrap_or(LiskSignTx_LiskTransactionCommon_LiskTransactionType::Transfer)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: LiskSignTx_LiskTransactionCommon_LiskTransactionType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // optional uint64 amount = 2;


    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0u64)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional uint64 fee = 3;


    pub fn get_fee(&self) -> u64 {
        self.fee.unwrap_or(0)
    }
    pub fn clear_fee(&mut self) {
        self.fee = ::std::option::Option::None;
    }

    pub fn has_fee(&self) -> bool {
        self.fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee(&mut self, v: u64) {
        self.fee = ::std::option::Option::Some(v);
    }

    // optional string recipient_id = 4;


    pub fn get_recipient_id(&self) -> &str {
        match self.recipient_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_recipient_id(&mut self) {
        self.recipient_id.clear();
    }

    pub fn has_recipient_id(&self) -> bool {
        self.recipient_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recipient_id(&mut self, v: ::std::string::String) {
        self.recipient_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipient_id(&mut self) -> &mut ::std::string::String {
        if self.recipient_id.is_none() {
            self.recipient_id.set_default();
        }
        self.recipient_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_recipient_id(&mut self) -> ::std::string::String {
        self.recipient_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes sender_public_key = 5;


    pub fn get_sender_public_key(&self) -> &[u8] {
        match self.sender_public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_sender_public_key(&mut self) {
        self.sender_public_key.clear();
    }

    pub fn has_sender_public_key(&self) -> bool {
        self.sender_public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.sender_public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sender_public_key.is_none() {
            self.sender_public_key.set_default();
        }
        self.sender_public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.sender_public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes requester_public_key = 6;


    pub fn get_requester_public_key(&self) -> &[u8] {
        match self.requester_public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_requester_public_key(&mut self) {
        self.requester_public_key.clear();
    }

    pub fn has_requester_public_key(&self) -> bool {
        self.requester_public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requester_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.requester_public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requester_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.requester_public_key.is_none() {
            self.requester_public_key.set_default();
        }
        self.requester_public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_requester_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.requester_public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 7;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 timestamp = 8;


    pub fn get_timestamp(&self) -> u32 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset asset = 9;


    pub fn get_asset(&self) -> &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
        self.asset.as_ref().unwrap_or_else(|| <LiskSignTx_LiskTransactionCommon_LiskTransactionAsset as ::protobuf::Message>::default_instance())
    }
    pub fn clear_asset(&mut self) {
        self.asset.clear();
    }

    pub fn has_asset(&self) -> bool {
        self.asset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asset(&mut self, v: LiskSignTx_LiskTransactionCommon_LiskTransactionAsset) {
        self.asset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset(&mut self) -> &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
        if self.asset.is_none() {
            self.asset.set_default();
        }
        self.asset.as_mut().unwrap()
    }

    // Take field
    pub fn take_asset(&mut self) -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
        self.asset.take().unwrap_or_else(|| LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::new())
    }
}

impl ::protobuf::Message for LiskSignTx_LiskTransactionCommon {
    fn is_initialized(&self) -> bool {
        for v in &self.asset {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.fee = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.recipient_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.sender_public_key)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.requester_public_key)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.asset)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.fee {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.recipient_id.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.sender_public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        if let Some(ref v) = self.requester_public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.amount {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.fee {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.recipient_id.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.sender_public_key.as_ref() {
            os.write_bytes(5, &v)?;
        }
        if let Some(ref v) = self.requester_public_key.as_ref() {
            os.write_bytes(6, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(7, &v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint32(8, v)?;
        }
        if let Some(ref v) = self.asset.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskSignTx_LiskTransactionCommon {
        LiskSignTx_LiskTransactionCommon::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LiskSignTx_LiskTransactionCommon_LiskTransactionType>>(
                "type",
                |m: &LiskSignTx_LiskTransactionCommon| { &m.field_type },
                |m: &mut LiskSignTx_LiskTransactionCommon| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "amount",
                |m: &LiskSignTx_LiskTransactionCommon| { &m.amount },
                |m: &mut LiskSignTx_LiskTransactionCommon| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "fee",
                |m: &LiskSignTx_LiskTransactionCommon| { &m.fee },
                |m: &mut LiskSignTx_LiskTransactionCommon| { &mut m.fee },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recipient_id",
                |m: &LiskSignTx_LiskTransactionCommon| { &m.recipient_id },
                |m: &mut LiskSignTx_LiskTransactionCommon| { &mut m.recipient_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sender_public_key",
                |m: &LiskSignTx_LiskTransactionCommon| { &m.sender_public_key },
                |m: &mut LiskSignTx_LiskTransactionCommon| { &mut m.sender_public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "requester_public_key",
                |m: &LiskSignTx_LiskTransactionCommon| { &m.requester_public_key },
                |m: &mut LiskSignTx_LiskTransactionCommon| { &mut m.requester_public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &LiskSignTx_LiskTransactionCommon| { &m.signature },
                |m: &mut LiskSignTx_LiskTransactionCommon| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "timestamp",
                |m: &LiskSignTx_LiskTransactionCommon| { &m.timestamp },
                |m: &mut LiskSignTx_LiskTransactionCommon| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset>>(
                "asset",
                |m: &LiskSignTx_LiskTransactionCommon| { &m.asset },
                |m: &mut LiskSignTx_LiskTransactionCommon| { &mut m.asset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskSignTx_LiskTransactionCommon>(
                "LiskSignTx.LiskTransactionCommon",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskSignTx_LiskTransactionCommon {
        static instance: ::protobuf::rt::LazyV2<LiskSignTx_LiskTransactionCommon> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskSignTx_LiskTransactionCommon::new)
    }
}

impl ::protobuf::Clear for LiskSignTx_LiskTransactionCommon {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.amount = ::std::option::Option::None;
        self.fee = ::std::option::Option::None;
        self.recipient_id.clear();
        self.sender_public_key.clear();
        self.requester_public_key.clear();
        self.signature.clear();
        self.timestamp = ::std::option::Option::None;
        self.asset.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskSignTx_LiskTransactionCommon {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignTx_LiskTransactionCommon {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
    // message fields
    pub signature: ::protobuf::SingularPtrField<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType>,
    pub delegate: ::protobuf::SingularPtrField<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType>,
    pub votes: ::protobuf::RepeatedField<::std::string::String>,
    pub multisignature: ::protobuf::SingularPtrField<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType>,
    data: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
    fn default() -> &'a LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
        <LiskSignTx_LiskTransactionCommon_LiskTransactionAsset as ::protobuf::Message>::default_instance()
    }
}

impl LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
    pub fn new() -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
        ::std::default::Default::default()
    }

    // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType signature = 1;


    pub fn get_signature(&self) -> &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
        self.signature.as_ref().unwrap_or_else(|| <LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType) {
        self.signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
        self.signature.take().unwrap_or_else(|| LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::new())
    }

    // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType delegate = 2;


    pub fn get_delegate(&self) -> &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
        self.delegate.as_ref().unwrap_or_else(|| <LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_delegate(&mut self) {
        self.delegate.clear();
    }

    pub fn has_delegate(&self) -> bool {
        self.delegate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delegate(&mut self, v: LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType) {
        self.delegate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegate(&mut self) -> &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
        if self.delegate.is_none() {
            self.delegate.set_default();
        }
        self.delegate.as_mut().unwrap()
    }

    // Take field
    pub fn take_delegate(&mut self) -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
        self.delegate.take().unwrap_or_else(|| LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::new())
    }

    // repeated string votes = 3;


    pub fn get_votes(&self) -> &[::std::string::String] {
        &self.votes
    }
    pub fn clear_votes(&mut self) {
        self.votes.clear();
    }

    // Param is passed by value, moved
    pub fn set_votes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.votes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_votes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.votes
    }

    // Take field
    pub fn take_votes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.votes, ::protobuf::RepeatedField::new())
    }

    // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType multisignature = 4;


    pub fn get_multisignature(&self) -> &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
        self.multisignature.as_ref().unwrap_or_else(|| <LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_multisignature(&mut self) {
        self.multisignature.clear();
    }

    pub fn has_multisignature(&self) -> bool {
        self.multisignature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_multisignature(&mut self, v: LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType) {
        self.multisignature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multisignature(&mut self) -> &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
        if self.multisignature.is_none() {
            self.multisignature.set_default();
        }
        self.multisignature.as_mut().unwrap()
    }

    // Take field
    pub fn take_multisignature(&mut self) -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
        self.multisignature.take().unwrap_or_else(|| LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::new())
    }

    // optional string data = 5;


    pub fn get_data(&self) -> &str {
        match self.data.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        self.data.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
    fn is_initialized(&self) -> bool {
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delegate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.multisignature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.delegate)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.votes)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.multisignature)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.delegate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.votes {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if let Some(ref v) = self.multisignature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.data.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.delegate.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.votes {
            os.write_string(3, &v)?;
        };
        if let Some(ref v) = self.multisignature.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
        LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType>>(
                "signature",
                |m: &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset| { &m.signature },
                |m: &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType>>(
                "delegate",
                |m: &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset| { &m.delegate },
                |m: &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset| { &mut m.delegate },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "votes",
                |m: &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset| { &m.votes },
                |m: &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset| { &mut m.votes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType>>(
                "multisignature",
                |m: &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset| { &m.multisignature },
                |m: &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset| { &mut m.multisignature },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "data",
                |m: &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset| { &m.data },
                |m: &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset>(
                "LiskSignTx.LiskTransactionCommon.LiskTransactionAsset",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
        static instance: ::protobuf::rt::LazyV2<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::new)
    }
}

impl ::protobuf::Clear for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
    fn clear(&mut self) {
        self.signature.clear();
        self.delegate.clear();
        self.votes.clear();
        self.multisignature.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
    // message fields
    public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
    fn default() -> &'a LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
        <LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType as ::protobuf::Message>::default_instance()
    }
}

impl LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
    pub fn new() -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
        ::std::default::Default::default()
    }

    // optional bytes public_key = 1;


    pub fn get_public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
        LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "public_key",
                |m: &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType| { &m.public_key },
                |m: &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType| { &mut m.public_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType>(
                "LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
        static instance: ::protobuf::rt::LazyV2<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::new)
    }
}

impl ::protobuf::Clear for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
    fn clear(&mut self) {
        self.public_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
    // message fields
    username: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
    fn default() -> &'a LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
        <LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType as ::protobuf::Message>::default_instance()
    }
}

impl LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
    pub fn new() -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
        ::std::default::Default::default()
    }

    // optional string username = 1;


    pub fn get_username(&self) -> &str {
        match self.username.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    pub fn has_username(&self) -> bool {
        self.username.is_some()
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        if self.username.is_none() {
            self.username.set_default();
        }
        self.username.as_mut().unwrap()
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        self.username.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.username)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.username.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.username.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
        LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "username",
                |m: &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType| { &m.username },
                |m: &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType| { &mut m.username },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType>(
                "LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
        static instance: ::protobuf::rt::LazyV2<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::new)
    }
}

impl ::protobuf::Clear for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
    fn clear(&mut self) {
        self.username.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
    // message fields
    min: ::std::option::Option<u32>,
    life_time: ::std::option::Option<u32>,
    pub keys_group: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
    fn default() -> &'a LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
        <LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType as ::protobuf::Message>::default_instance()
    }
}

impl LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
    pub fn new() -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
        ::std::default::Default::default()
    }

    // optional uint32 min = 1;


    pub fn get_min(&self) -> u32 {
        self.min.unwrap_or(0)
    }
    pub fn clear_min(&mut self) {
        self.min = ::std::option::Option::None;
    }

    pub fn has_min(&self) -> bool {
        self.min.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min(&mut self, v: u32) {
        self.min = ::std::option::Option::Some(v);
    }

    // optional uint32 life_time = 2;


    pub fn get_life_time(&self) -> u32 {
        self.life_time.unwrap_or(0)
    }
    pub fn clear_life_time(&mut self) {
        self.life_time = ::std::option::Option::None;
    }

    pub fn has_life_time(&self) -> bool {
        self.life_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_life_time(&mut self, v: u32) {
        self.life_time = ::std::option::Option::Some(v);
    }

    // repeated string keys_group = 3;


    pub fn get_keys_group(&self) -> &[::std::string::String] {
        &self.keys_group
    }
    pub fn clear_keys_group(&mut self) {
        self.keys_group.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys_group(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.keys_group = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys_group(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.keys_group
    }

    // Take field
    pub fn take_keys_group(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.keys_group, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.min = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.life_time = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys_group)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.min {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.life_time {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.keys_group {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.min {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.life_time {
            os.write_uint32(2, v)?;
        }
        for v in &self.keys_group {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
        LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "min",
                |m: &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType| { &m.min },
                |m: &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType| { &mut m.min },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "life_time",
                |m: &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType| { &m.life_time },
                |m: &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType| { &mut m.life_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "keys_group",
                |m: &LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType| { &m.keys_group },
                |m: &mut LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType| { &mut m.keys_group },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType>(
                "LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
        static instance: ::protobuf::rt::LazyV2<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::new)
    }
}

impl ::protobuf::Clear for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
    fn clear(&mut self) {
        self.min = ::std::option::Option::None;
        self.life_time = ::std::option::Option::None;
        self.keys_group.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LiskSignTx_LiskTransactionCommon_LiskTransactionType {
    Transfer = 0,
    RegisterSecondPassphrase = 1,
    RegisterDelegate = 2,
    CastVotes = 3,
    RegisterMultisignatureAccount = 4,
    CreateDapp = 5,
    TransferIntoDapp = 6,
    TransferOutOfDapp = 7,
}

impl ::protobuf::ProtobufEnum for LiskSignTx_LiskTransactionCommon_LiskTransactionType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LiskSignTx_LiskTransactionCommon_LiskTransactionType> {
        match value {
            0 => ::std::option::Option::Some(LiskSignTx_LiskTransactionCommon_LiskTransactionType::Transfer),
            1 => ::std::option::Option::Some(LiskSignTx_LiskTransactionCommon_LiskTransactionType::RegisterSecondPassphrase),
            2 => ::std::option::Option::Some(LiskSignTx_LiskTransactionCommon_LiskTransactionType::RegisterDelegate),
            3 => ::std::option::Option::Some(LiskSignTx_LiskTransactionCommon_LiskTransactionType::CastVotes),
            4 => ::std::option::Option::Some(LiskSignTx_LiskTransactionCommon_LiskTransactionType::RegisterMultisignatureAccount),
            5 => ::std::option::Option::Some(LiskSignTx_LiskTransactionCommon_LiskTransactionType::CreateDapp),
            6 => ::std::option::Option::Some(LiskSignTx_LiskTransactionCommon_LiskTransactionType::TransferIntoDapp),
            7 => ::std::option::Option::Some(LiskSignTx_LiskTransactionCommon_LiskTransactionType::TransferOutOfDapp),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LiskSignTx_LiskTransactionCommon_LiskTransactionType] = &[
            LiskSignTx_LiskTransactionCommon_LiskTransactionType::Transfer,
            LiskSignTx_LiskTransactionCommon_LiskTransactionType::RegisterSecondPassphrase,
            LiskSignTx_LiskTransactionCommon_LiskTransactionType::RegisterDelegate,
            LiskSignTx_LiskTransactionCommon_LiskTransactionType::CastVotes,
            LiskSignTx_LiskTransactionCommon_LiskTransactionType::RegisterMultisignatureAccount,
            LiskSignTx_LiskTransactionCommon_LiskTransactionType::CreateDapp,
            LiskSignTx_LiskTransactionCommon_LiskTransactionType::TransferIntoDapp,
            LiskSignTx_LiskTransactionCommon_LiskTransactionType::TransferOutOfDapp,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LiskSignTx_LiskTransactionCommon_LiskTransactionType>("LiskSignTx.LiskTransactionCommon.LiskTransactionType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LiskSignTx_LiskTransactionCommon_LiskTransactionType {
}

impl ::std::default::Default for LiskSignTx_LiskTransactionCommon_LiskTransactionType {
    fn default() -> Self {
        LiskSignTx_LiskTransactionCommon_LiskTransactionType::Transfer
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignTx_LiskTransactionCommon_LiskTransactionType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskSignedTx {
    // message fields
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskSignedTx {
    fn default() -> &'a LiskSignedTx {
        <LiskSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl LiskSignedTx {
    pub fn new() -> LiskSignedTx {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LiskSignedTx {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskSignedTx {
        LiskSignedTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &LiskSignedTx| { &m.signature },
                |m: &mut LiskSignedTx| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskSignedTx>(
                "LiskSignedTx",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskSignedTx {
        static instance: ::protobuf::rt::LazyV2<LiskSignedTx> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskSignedTx::new)
    }
}

impl ::protobuf::Clear for LiskSignedTx {
    fn clear(&mut self) {
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignedTx {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskSignMessage {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    message: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskSignMessage {
    fn default() -> &'a LiskSignMessage {
        <LiskSignMessage as ::protobuf::Message>::default_instance()
    }
}

impl LiskSignMessage {
    pub fn new() -> LiskSignMessage {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bytes message = 2;


    pub fn get_message(&self) -> &[u8] {
        match self.message.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        self.message.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LiskSignMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.message.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.message.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskSignMessage {
        LiskSignMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &LiskSignMessage| { &m.address_n },
                |m: &mut LiskSignMessage| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "message",
                |m: &LiskSignMessage| { &m.message },
                |m: &mut LiskSignMessage| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskSignMessage>(
                "LiskSignMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskSignMessage {
        static instance: ::protobuf::rt::LazyV2<LiskSignMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskSignMessage::new)
    }
}

impl ::protobuf::Clear for LiskSignMessage {
    fn clear(&mut self) {
        self.address_n.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskSignMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskMessageSignature {
    // message fields
    public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskMessageSignature {
    fn default() -> &'a LiskMessageSignature {
        <LiskMessageSignature as ::protobuf::Message>::default_instance()
    }
}

impl LiskMessageSignature {
    pub fn new() -> LiskMessageSignature {
        ::std::default::Default::default()
    }

    // optional bytes public_key = 1;


    pub fn get_public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LiskMessageSignature {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskMessageSignature {
        LiskMessageSignature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "public_key",
                |m: &LiskMessageSignature| { &m.public_key },
                |m: &mut LiskMessageSignature| { &mut m.public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &LiskMessageSignature| { &m.signature },
                |m: &mut LiskMessageSignature| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskMessageSignature>(
                "LiskMessageSignature",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskMessageSignature {
        static instance: ::protobuf::rt::LazyV2<LiskMessageSignature> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskMessageSignature::new)
    }
}

impl ::protobuf::Clear for LiskMessageSignature {
    fn clear(&mut self) {
        self.public_key.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskMessageSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskMessageSignature {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LiskVerifyMessage {
    // message fields
    public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    message: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LiskVerifyMessage {
    fn default() -> &'a LiskVerifyMessage {
        <LiskVerifyMessage as ::protobuf::Message>::default_instance()
    }
}

impl LiskVerifyMessage {
    pub fn new() -> LiskVerifyMessage {
        ::std::default::Default::default()
    }

    // optional bytes public_key = 1;


    pub fn get_public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes message = 3;


    pub fn get_message(&self) -> &[u8] {
        match self.message.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        self.message.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LiskVerifyMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.message.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.message.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LiskVerifyMessage {
        LiskVerifyMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "public_key",
                |m: &LiskVerifyMessage| { &m.public_key },
                |m: &mut LiskVerifyMessage| { &mut m.public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &LiskVerifyMessage| { &m.signature },
                |m: &mut LiskVerifyMessage| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "message",
                |m: &LiskVerifyMessage| { &m.message },
                |m: &mut LiskVerifyMessage| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LiskVerifyMessage>(
                "LiskVerifyMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LiskVerifyMessage {
        static instance: ::protobuf::rt::LazyV2<LiskVerifyMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LiskVerifyMessage::new)
    }
}

impl ::protobuf::Clear for LiskVerifyMessage {
    fn clear(&mut self) {
        self.public_key.clear();
        self.signature.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LiskVerifyMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskVerifyMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13messages-lisk.proto\x12\x17hw.trezor.messages.lisk\"P\n\x0eLiskGet\
    Address\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cs\
    how_display\x18\x02\x20\x01(\x08R\x0bshowDisplay\"'\n\x0bLiskAddress\x12\
    \x18\n\x07address\x18\x01\x20\x01(\tR\x07address\"R\n\x10LiskGetPublicKe\
    y\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_di\
    splay\x18\x02\x20\x01(\x08R\x0bshowDisplay\".\n\rLiskPublicKey\x12\x1d\n\
    \npublic_key\x18\x01\x20\x01(\x0cR\tpublicKey\"\xb8\x0b\n\nLiskSignTx\
    \x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12[\n\x0btransact\
    ion\x18\x02\x20\x01(\x0b29.hw.trezor.messages.lisk.LiskSignTx.LiskTransa\
    ctionCommonR\x0btransaction\x1a\xaf\n\n\x15LiskTransactionCommon\x12a\n\
    \x04type\x18\x01\x20\x01(\x0e2M.hw.trezor.messages.lisk.LiskSignTx.LiskT\
    ransactionCommon.LiskTransactionTypeR\x04type\x12\x19\n\x06amount\x18\
    \x02\x20\x01(\x04:\x010R\x06amount\x12\x10\n\x03fee\x18\x03\x20\x01(\x04\
    R\x03fee\x12!\n\x0crecipient_id\x18\x04\x20\x01(\tR\x0brecipientId\x12*\
    \n\x11sender_public_key\x18\x05\x20\x01(\x0cR\x0fsenderPublicKey\x120\n\
    \x14requester_public_key\x18\x06\x20\x01(\x0cR\x12requesterPublicKey\x12\
    \x1c\n\tsignature\x18\x07\x20\x01(\x0cR\tsignature\x12\x1c\n\ttimestamp\
    \x18\x08\x20\x01(\rR\ttimestamp\x12d\n\x05asset\x18\t\x20\x01(\x0b2N.hw.\
    trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAss\
    etR\x05asset\x1a\x99\x05\n\x14LiskTransactionAsset\x12~\n\tsignature\x18\
    \x01\x20\x01(\x0b2`.hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCo\
    mmon.LiskTransactionAsset.LiskSignatureTypeR\tsignature\x12{\n\x08delega\
    te\x18\x02\x20\x01(\x0b2_.hw.trezor.messages.lisk.LiskSignTx.LiskTransac\
    tionCommon.LiskTransactionAsset.LiskDelegateTypeR\x08delegate\x12\x14\n\
    \x05votes\x18\x03\x20\x03(\tR\x05votes\x12\x8d\x01\n\x0emultisignature\
    \x18\x04\x20\x01(\x0b2e.hw.trezor.messages.lisk.LiskSignTx.LiskTransacti\
    onCommon.LiskTransactionAsset.LiskMultisignatureTypeR\x0emultisignature\
    \x12\x12\n\x04data\x18\x05\x20\x01(\tR\x04data\x1a2\n\x11LiskSignatureTy\
    pe\x12\x1d\n\npublic_key\x18\x01\x20\x01(\x0cR\tpublicKey\x1a.\n\x10Lisk\
    DelegateType\x12\x1a\n\x08username\x18\x01\x20\x01(\tR\x08username\x1af\
    \n\x16LiskMultisignatureType\x12\x10\n\x03min\x18\x01\x20\x01(\rR\x03min\
    \x12\x1b\n\tlife_time\x18\x02\x20\x01(\rR\x08lifeTime\x12\x1d\n\nkeys_gr\
    oup\x18\x03\x20\x03(\tR\tkeysGroup\"\xc6\x01\n\x13LiskTransactionType\
    \x12\x0c\n\x08Transfer\x10\0\x12\x1c\n\x18RegisterSecondPassphrase\x10\
    \x01\x12\x14\n\x10RegisterDelegate\x10\x02\x12\r\n\tCastVotes\x10\x03\
    \x12!\n\x1dRegisterMultisignatureAccount\x10\x04\x12\x0e\n\nCreateDapp\
    \x10\x05\x12\x14\n\x10TransferIntoDapp\x10\x06\x12\x15\n\x11TransferOutO\
    fDapp\x10\x07\",\n\x0cLiskSignedTx\x12\x1c\n\tsignature\x18\x01\x20\x01(\
    \x0cR\tsignature\"H\n\x0fLiskSignMessage\x12\x1b\n\taddress_n\x18\x01\
    \x20\x03(\rR\x08addressN\x12\x18\n\x07message\x18\x02\x20\x01(\x0cR\x07m\
    essage\"S\n\x14LiskMessageSignature\x12\x1d\n\npublic_key\x18\x01\x20\
    \x01(\x0cR\tpublicKey\x12\x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignat\
    ure\"j\n\x11LiskVerifyMessage\x12\x1d\n\npublic_key\x18\x01\x20\x01(\x0c\
    R\tpublicKey\x12\x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignature\x12\
    \x18\n\x07message\x18\x03\x20\x01(\x0cR\x07messageB8\n#com.satoshilabs.t\
    rezor.lib.protobufB\x11TrezorMessageLiskJ\x87)\n\x07\x12\x05\0\0\x96\x01\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08\x1f\
    \n\x08\n\x01\x08\x12\x03\x04\0<\n.\n\x02\x08\x01\x12\x03\x04\0<\x1a#\x20\
    Sugar\x20for\x20easier\x20handling\x20in\x20Java\n\n\x08\n\x01\x08\x12\
    \x03\x05\02\n\t\n\x02\x08\x08\x12\x03\x05\02\n~\n\x02\x04\0\x12\x04\r\0\
    \x10\x01\x1ar*\n\x20Request:\x20Ask\x20device\x20for\x20Lisk\x20address\
    \x20corresponding\x20to\x20address_n\x20path\n\x20@start\n\x20@next\x20L\
    iskAddress\n\x20@next\x20Failure\n\n\n\n\x03\x04\0\x01\x12\x03\r\x08\x16\
    \n=\n\x04\x04\0\x02\0\x12\x03\x0e\x04\"\"0\x20BIP-32\x20path\x20to\x20de\
    rive\x20the\x20key\x20from\x20master\x20node\n\n\x0c\n\x05\x04\0\x02\0\
    \x04\x12\x03\x0e\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0e\r\x13\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\x14\x1d\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x0e\x20!\nC\n\x04\x04\0\x02\x01\x12\x03\x0f\x04#\"6\x20Opti\
    onally\x20show\x20on\x20display\x20before\x20sending\x20the\x20result\n\
    \n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0f\x04\x0c\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x0f\r\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\x12\
    \x1e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f!\"\nV\n\x02\x04\x01\x12\
    \x04\x16\0\x18\x01\x1aJ*\n\x20Response:\x20Contains\x20Lisk\x20address\
    \x20derived\x20from\x20device\x20private\x20seed\n\x20@end\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x16\x08\x13\n\x1b\n\x04\x04\x01\x02\0\x12\x03\x17\
    \x04\x20\"\x0e\x20Lisk\x20address\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\
    \x03\x17\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x17\r\x13\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x17\x14\x1b\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x17\x1e\x1f\nt\n\x02\x04\x02\x12\x04\x1f\0\"\x01\x1ah*\n\x20Req\
    uest:\x20Ask\x20device\x20for\x20Lisk\x20public\x20key\x20corresponding\
    \x20to\x20address_n\x20path\n\x20@start\n\x20@next\x20LiskPublicKey\n\n\
    \n\n\x03\x04\x02\x01\x12\x03\x1f\x08\x18\n=\n\x04\x04\x02\x02\0\x12\x03\
    \x20\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20from\
    \x20master\x20node\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x20\x04\x0c\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x20\r\x13\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x03\x20\x14\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x20\x20!\
    \nC\n\x04\x04\x02\x02\x01\x12\x03!\x04#\"6\x20Optionally\x20show\x20on\
    \x20display\x20before\x20sending\x20the\x20result\n\n\x0c\n\x05\x04\x02\
    \x02\x01\x04\x12\x03!\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03!\r\
    \x11\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03!\x12\x1e\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03!!\"\nY\n\x02\x04\x03\x12\x04(\0*\x01\x1aM*\n\
    \x20Response:\x20Contains\x20Lisk\x20public\x20key\x20derived\x20from\
    \x20device\x20private\x20seed\n\x20@end\n\n\n\n\x03\x04\x03\x01\x12\x03(\
    \x08\x15\n\x1e\n\x04\x04\x03\x02\0\x12\x03)\x04\"\"\x11\x20Lisk\x20publi\
    c\x20key\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03)\x04\x0c\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x03)\r\x12\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03)\
    \x13\x1d\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03)\x20!\ng\n\x02\x04\x04\
    \x12\x042\0n\x01\x1a[*\n\x20Request:\x20Ask\x20device\x20to\x20sign\x20L\
    isk\x20transaction\n\x20@start\n\x20@next\x20LiskSignedTx\n\x20@next\x20\
    Failure\n\n\n\n\x03\x04\x04\x01\x12\x032\x08\x12\n=\n\x04\x04\x04\x02\0\
    \x12\x033\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20fr\
    om\x20master\x20node\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x033\x04\x0c\n\
    \x0c\n\x05\x04\x04\x02\0\x05\x12\x033\r\x13\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x033\x14\x1d\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x033\x20!\n)\n\
    \x04\x04\x04\x02\x01\x12\x034\x043\"\x1c\x20Lisk\x20transaction\x20struc\
    ture\n\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x034\x04\x0c\n\x0c\n\x05\x04\
    \x04\x02\x01\x06\x12\x034\r\"\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x034#.\
    \n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03412\nN\n\x04\x04\x04\x03\0\x12\
    \x048\x04m\x05\x1a@*\n\x20Structure\x20representing\x20the\x20common\x20\
    part\x20for\x20Lisk\x20transactions\n\n\x0c\n\x05\x04\x04\x03\0\x01\x12\
    \x038\x0c!\n\r\n\x06\x04\x04\x03\0\x02\0\x12\x039\x08.\n\x0e\n\x07\x04\
    \x04\x03\0\x02\0\x04\x12\x039\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\0\
    \x06\x12\x039\x11$\n\x0e\n\x07\x04\x04\x03\0\x02\0\x01\x12\x039%)\n\x0e\
    \n\x07\x04\x04\x03\0\x02\0\x03\x12\x039,-\n\r\n\x06\x04\x04\x03\0\x02\
    \x01\x12\x03:\x08/\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x04\x12\x03:\x08\
    \x10\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x05\x12\x03:\x11\x17\n\x0e\n\x07\
    \x04\x04\x03\0\x02\x01\x01\x12\x03:\x18\x1e\n\x0e\n\x07\x04\x04\x03\0\
    \x02\x01\x03\x12\x03:!\"\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x08\x12\x03:#\
    .\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x07\x12\x03:,-\n\r\n\x06\x04\x04\x03\
    \0\x02\x02\x12\x03;\x08\x20\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x04\x12\
    \x03;\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x05\x12\x03;\x11\x17\n\
    \x0e\n\x07\x04\x04\x03\0\x02\x02\x01\x12\x03;\x18\x1b\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x02\x03\x12\x03;\x1e\x1f\n\r\n\x06\x04\x04\x03\0\x02\x03\
    \x12\x03<\x08)\n\x0e\n\x07\x04\x04\x03\0\x02\x03\x04\x12\x03<\x08\x10\n\
    \x0e\n\x07\x04\x04\x03\0\x02\x03\x05\x12\x03<\x11\x17\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x03\x01\x12\x03<\x18$\n\x0e\n\x07\x04\x04\x03\0\x02\x03\
    \x03\x12\x03<'(\n\r\n\x06\x04\x04\x03\0\x02\x04\x12\x03=\x08-\n\x0e\n\
    \x07\x04\x04\x03\0\x02\x04\x04\x12\x03=\x08\x10\n\x0e\n\x07\x04\x04\x03\
    \0\x02\x04\x05\x12\x03=\x11\x16\n\x0e\n\x07\x04\x04\x03\0\x02\x04\x01\
    \x12\x03=\x17(\n\x0e\n\x07\x04\x04\x03\0\x02\x04\x03\x12\x03=+,\n\r\n\
    \x06\x04\x04\x03\0\x02\x05\x12\x03>\x080\n\x0e\n\x07\x04\x04\x03\0\x02\
    \x05\x04\x12\x03>\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\x05\x05\x12\x03>\
    \x11\x16\n\x0e\n\x07\x04\x04\x03\0\x02\x05\x01\x12\x03>\x17+\n\x0e\n\x07\
    \x04\x04\x03\0\x02\x05\x03\x12\x03>./\n\r\n\x06\x04\x04\x03\0\x02\x06\
    \x12\x03?\x08%\n\x0e\n\x07\x04\x04\x03\0\x02\x06\x04\x12\x03?\x08\x10\n\
    \x0e\n\x07\x04\x04\x03\0\x02\x06\x05\x12\x03?\x11\x16\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x06\x01\x12\x03?\x17\x20\n\x0e\n\x07\x04\x04\x03\0\x02\
    \x06\x03\x12\x03?#$\n\r\n\x06\x04\x04\x03\0\x02\x07\x12\x03@\x08&\n\x0e\
    \n\x07\x04\x04\x03\0\x02\x07\x04\x12\x03@\x08\x10\n\x0e\n\x07\x04\x04\
    \x03\0\x02\x07\x05\x12\x03@\x11\x17\n\x0e\n\x07\x04\x04\x03\0\x02\x07\
    \x01\x12\x03@\x18!\n\x0e\n\x07\x04\x04\x03\0\x02\x07\x03\x12\x03@$%\n\r\
    \n\x06\x04\x04\x03\0\x02\x08\x12\x03A\x080\n\x0e\n\x07\x04\x04\x03\0\x02\
    \x08\x04\x12\x03A\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\x08\x06\x12\x03A\
    \x11%\n\x0e\n\x07\x04\x04\x03\0\x02\x08\x01\x12\x03A&+\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x08\x03\x12\x03A./\n,\n\x06\x04\x04\x03\0\x04\0\x12\x04E\
    \x08N\t\x1a\x1c*\n\x20Type\x20of\x20Lisk\x20transaction\n\n\x0e\n\x07\
    \x04\x04\x03\0\x04\0\x01\x12\x03E\r\x20\n\x0f\n\x08\x04\x04\x03\0\x04\0\
    \x02\0\x12\x03F\x0c\x19\n\x10\n\t\x04\x04\x03\0\x04\0\x02\0\x01\x12\x03F\
    \x0c\x14\n\x10\n\t\x04\x04\x03\0\x04\0\x02\0\x02\x12\x03F\x17\x18\n\x0f\
    \n\x08\x04\x04\x03\0\x04\0\x02\x01\x12\x03G\x0c)\n\x10\n\t\x04\x04\x03\0\
    \x04\0\x02\x01\x01\x12\x03G\x0c$\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x01\
    \x02\x12\x03G'(\n\x0f\n\x08\x04\x04\x03\0\x04\0\x02\x02\x12\x03H\x0c!\n\
    \x10\n\t\x04\x04\x03\0\x04\0\x02\x02\x01\x12\x03H\x0c\x1c\n\x10\n\t\x04\
    \x04\x03\0\x04\0\x02\x02\x02\x12\x03H\x1f\x20\n\x0f\n\x08\x04\x04\x03\0\
    \x04\0\x02\x03\x12\x03I\x0c\x1a\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x03\
    \x01\x12\x03I\x0c\x15\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x03\x02\x12\x03I\
    \x18\x19\n\x0f\n\x08\x04\x04\x03\0\x04\0\x02\x04\x12\x03J\x0c.\n\x10\n\t\
    \x04\x04\x03\0\x04\0\x02\x04\x01\x12\x03J\x0c)\n\x10\n\t\x04\x04\x03\0\
    \x04\0\x02\x04\x02\x12\x03J,-\n\x0f\n\x08\x04\x04\x03\0\x04\0\x02\x05\
    \x12\x03K\x0c\x1b\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x05\x01\x12\x03K\x0c\
    \x16\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x05\x02\x12\x03K\x19\x1a\n\x0f\n\
    \x08\x04\x04\x03\0\x04\0\x02\x06\x12\x03L\x0c!\n\x10\n\t\x04\x04\x03\0\
    \x04\0\x02\x06\x01\x12\x03L\x0c\x1c\n\x10\n\t\x04\x04\x03\0\x04\0\x02\
    \x06\x02\x12\x03L\x1f\x20\n\x0f\n\x08\x04\x04\x03\0\x04\0\x02\x07\x12\
    \x03M\x0c\"\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x07\x01\x12\x03M\x0c\x1d\n\
    \x10\n\t\x04\x04\x03\0\x04\0\x02\x07\x02\x12\x03M\x20!\nR\n\x06\x04\x04\
    \x03\0\x03\0\x12\x04R\x08l\t\x1aB*\n\x20Structure\x20representing\x20the\
    \x20asset\x20field\x20in\x20the\x20Lisk\x20transaction\n\n\x0e\n\x07\x04\
    \x04\x03\0\x03\0\x01\x12\x03R\x10$\n\x0f\n\x08\x04\x04\x03\0\x03\0\x02\0\
    \x12\x03S\x0c5\n\x10\n\t\x04\x04\x03\0\x03\0\x02\0\x04\x12\x03S\x0c\x14\
    \n\x10\n\t\x04\x04\x03\0\x03\0\x02\0\x06\x12\x03S\x15&\n\x10\n\t\x04\x04\
    \x03\0\x03\0\x02\0\x01\x12\x03S'0\n\x10\n\t\x04\x04\x03\0\x03\0\x02\0\
    \x03\x12\x03S34\n\x0f\n\x08\x04\x04\x03\0\x03\0\x02\x01\x12\x03T\x0c3\n\
    \x10\n\t\x04\x04\x03\0\x03\0\x02\x01\x04\x12\x03T\x0c\x14\n\x10\n\t\x04\
    \x04\x03\0\x03\0\x02\x01\x06\x12\x03T\x15%\n\x10\n\t\x04\x04\x03\0\x03\0\
    \x02\x01\x01\x12\x03T&.\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x01\x03\x12\
    \x03T12\n\x0f\n\x08\x04\x04\x03\0\x03\0\x02\x02\x12\x03U\x0c&\n\x10\n\t\
    \x04\x04\x03\0\x03\0\x02\x02\x04\x12\x03U\x0c\x14\n\x10\n\t\x04\x04\x03\
    \0\x03\0\x02\x02\x05\x12\x03U\x15\x1b\n\x10\n\t\x04\x04\x03\0\x03\0\x02\
    \x02\x01\x12\x03U\x1c!\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x02\x03\x12\x03\
    U$%\n\x0f\n\x08\x04\x04\x03\0\x03\0\x02\x03\x12\x03V\x0c?\n\x10\n\t\x04\
    \x04\x03\0\x03\0\x02\x03\x04\x12\x03V\x0c\x14\n\x10\n\t\x04\x04\x03\0\
    \x03\0\x02\x03\x06\x12\x03V\x15+\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x03\
    \x01\x12\x03V,:\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x03\x03\x12\x03V=>\n\
    \x0f\n\x08\x04\x04\x03\0\x03\0\x02\x04\x12\x03W\x0c%\n\x10\n\t\x04\x04\
    \x03\0\x03\0\x02\x04\x04\x12\x03W\x0c\x14\n\x10\n\t\x04\x04\x03\0\x03\0\
    \x02\x04\x05\x12\x03W\x15\x1b\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x04\x01\
    \x12\x03W\x1c\x20\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x04\x03\x12\x03W#$\n\
    d\n\x08\x04\x04\x03\0\x03\0\x03\0\x12\x04[\x0c]\r\x1aR*\n\x20Structure\
    \x20representing\x20the\x20signature\x20field\x20in\x20the\x20Lisk\x20tr\
    ansaction\x20asset\x20field\n\n\x10\n\t\x04\x04\x03\0\x03\0\x03\0\x01\
    \x12\x03[\x14%\n\x11\n\n\x04\x04\x03\0\x03\0\x03\0\x02\0\x12\x03\\\x10.\
    \n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\0\x02\0\x04\x12\x03\\\x10\x18\n\x12\
    \n\x0b\x04\x04\x03\0\x03\0\x03\0\x02\0\x05\x12\x03\\\x19\x1e\n\x12\n\x0b\
    \x04\x04\x03\0\x03\0\x03\0\x02\0\x01\x12\x03\\\x1f)\n\x12\n\x0b\x04\x04\
    \x03\0\x03\0\x03\0\x02\0\x03\x12\x03\\,-\nc\n\x08\x04\x04\x03\0\x03\0\
    \x03\x01\x12\x04a\x0cc\r\x1aQ*\n\x20Structure\x20representing\x20the\x20\
    delegate\x20field\x20in\x20the\x20Lisk\x20transaction\x20asset\x20field\
    \n\n\x10\n\t\x04\x04\x03\0\x03\0\x03\x01\x01\x12\x03a\x14$\n\x11\n\n\x04\
    \x04\x03\0\x03\0\x03\x01\x02\0\x12\x03b\x10.\n\x12\n\x0b\x04\x04\x03\0\
    \x03\0\x03\x01\x02\0\x04\x12\x03b\x10\x18\n\x12\n\x0b\x04\x04\x03\0\x03\
    \0\x03\x01\x02\0\x05\x12\x03b\x19\x1f\n\x12\n\x0b\x04\x04\x03\0\x03\0\
    \x03\x01\x02\0\x01\x12\x03b\x20(\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\x01\
    \x02\0\x03\x12\x03b,-\ni\n\x08\x04\x04\x03\0\x03\0\x03\x02\x12\x04g\x0ck\
    \r\x1aW*\n\x20Structure\x20representing\x20the\x20multisignature\x20fiel\
    d\x20in\x20the\x20Lisk\x20transaction\x20asset\x20field\n\n\x10\n\t\x04\
    \x04\x03\0\x03\0\x03\x02\x01\x12\x03g\x14*\n\x11\n\n\x04\x04\x03\0\x03\0\
    \x03\x02\x02\0\x12\x03h\x10(\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\x02\x02\
    \0\x04\x12\x03h\x10\x18\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\x02\x02\0\
    \x05\x12\x03h\x19\x1f\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\x02\x02\0\x01\
    \x12\x03h\x20#\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\x02\x02\0\x03\x12\x03\
    h&'\n\x11\n\n\x04\x04\x03\0\x03\0\x03\x02\x02\x01\x12\x03i\x10.\n\x12\n\
    \x0b\x04\x04\x03\0\x03\0\x03\x02\x02\x01\x04\x12\x03i\x10\x18\n\x12\n\
    \x0b\x04\x04\x03\0\x03\0\x03\x02\x02\x01\x05\x12\x03i\x19\x1f\n\x12\n\
    \x0b\x04\x04\x03\0\x03\0\x03\x02\x02\x01\x01\x12\x03i\x20)\n\x12\n\x0b\
    \x04\x04\x03\0\x03\0\x03\x02\x02\x01\x03\x12\x03i,-\n\x11\n\n\x04\x04\
    \x03\0\x03\0\x03\x02\x02\x02\x12\x03j\x10/\n\x12\n\x0b\x04\x04\x03\0\x03\
    \0\x03\x02\x02\x02\x04\x12\x03j\x10\x18\n\x12\n\x0b\x04\x04\x03\0\x03\0\
    \x03\x02\x02\x02\x05\x12\x03j\x19\x1f\n\x12\n\x0b\x04\x04\x03\0\x03\0\
    \x03\x02\x02\x02\x01\x12\x03j\x20*\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\
    \x02\x02\x02\x03\x12\x03j-.\nC\n\x02\x04\x05\x12\x04t\0v\x01\x1a7*\n\x20\
    Response:\x20Contains\x20Lisk\x20transaction\x20signature\n\x20@end\n\n\
    \n\n\x03\x04\x05\x01\x12\x03t\x08\x14\n\x0b\n\x04\x04\x05\x02\0\x12\x03u\
    \x04!\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03u\x04\x0c\n\x0c\n\x05\x04\x05\
    \x02\0\x05\x12\x03u\r\x12\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03u\x13\x1c\
    \n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03u\x1f\x20\ng\n\x02\x04\x06\x12\x05\
    ~\0\x81\x01\x01\x1aZ*\n\x20Request:\x20Ask\x20device\x20to\x20sign\x20me\
    ssage\n\x20@start\n\x20@next\x20LiskMessageSignature\n\x20@next\x20Failu\
    re\n\n\n\n\x03\x04\x06\x01\x12\x03~\x08\x17\n\x0b\n\x04\x04\x06\x02\0\
    \x12\x03\x7f\x04\"\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03\x7f\x04\x0c\n\
    \x0c\n\x05\x04\x06\x02\0\x05\x12\x03\x7f\r\x13\n\x0c\n\x05\x04\x06\x02\0\
    \x01\x12\x03\x7f\x14\x1d\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03\x7f\x20!\
    \n\x0c\n\x04\x04\x06\x02\x01\x12\x04\x80\x01\x04\x1f\n\r\n\x05\x04\x06\
    \x02\x01\x04\x12\x04\x80\x01\x04\x0c\n\r\n\x05\x04\x06\x02\x01\x05\x12\
    \x04\x80\x01\r\x12\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\x80\x01\x13\x1a\
    \n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\x80\x01\x1d\x1e\n0\n\x02\x04\x07\
    \x12\x06\x87\x01\0\x8a\x01\x01\x1a\"*\n\x20Response:\x20Signed\x20messag\
    e\n\x20@end\n\n\x0b\n\x03\x04\x07\x01\x12\x04\x87\x01\x08\x1c\n\x0c\n\
    \x04\x04\x07\x02\0\x12\x04\x88\x01\x04\"\n\r\n\x05\x04\x07\x02\0\x04\x12\
    \x04\x88\x01\x04\x0c\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\x88\x01\r\x12\n\
    \r\n\x05\x04\x07\x02\0\x01\x12\x04\x88\x01\x13\x1d\n\r\n\x05\x04\x07\x02\
    \0\x03\x12\x04\x88\x01\x20!\n\x0c\n\x04\x04\x07\x02\x01\x12\x04\x89\x01\
    \x04!\n\r\n\x05\x04\x07\x02\x01\x04\x12\x04\x89\x01\x04\x0c\n\r\n\x05\
    \x04\x07\x02\x01\x05\x12\x04\x89\x01\r\x12\n\r\n\x05\x04\x07\x02\x01\x01\
    \x12\x04\x89\x01\x13\x1c\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\x89\x01\
    \x1f\x20\n]\n\x02\x04\x08\x12\x06\x92\x01\0\x96\x01\x01\x1aO*\n\x20Reque\
    st:\x20Ask\x20device\x20to\x20verify\x20message\n\x20@start\n\x20@next\
    \x20Success\n\x20@next\x20Failure\n\n\x0b\n\x03\x04\x08\x01\x12\x04\x92\
    \x01\x08\x19\n\x0c\n\x04\x04\x08\x02\0\x12\x04\x93\x01\x04\"\n\r\n\x05\
    \x04\x08\x02\0\x04\x12\x04\x93\x01\x04\x0c\n\r\n\x05\x04\x08\x02\0\x05\
    \x12\x04\x93\x01\r\x12\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\x93\x01\x13\
    \x1d\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\x93\x01\x20!\n\x0c\n\x04\x04\
    \x08\x02\x01\x12\x04\x94\x01\x04!\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04\
    \x94\x01\x04\x0c\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\x94\x01\r\x12\n\r\
    \n\x05\x04\x08\x02\x01\x01\x12\x04\x94\x01\x13\x1c\n\r\n\x05\x04\x08\x02\
    \x01\x03\x12\x04\x94\x01\x1f\x20\n\x0c\n\x04\x04\x08\x02\x02\x12\x04\x95\
    \x01\x04\x1f\n\r\n\x05\x04\x08\x02\x02\x04\x12\x04\x95\x01\x04\x0c\n\r\n\
    \x05\x04\x08\x02\x02\x05\x12\x04\x95\x01\r\x12\n\r\n\x05\x04\x08\x02\x02\
    \x01\x12\x04\x95\x01\x13\x1a\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\x95\
    \x01\x1d\x1e\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
