// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages-ethereum.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct EthereumGetAddress {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumGetAddress {
    fn default() -> &'a EthereumGetAddress {
        <EthereumGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl EthereumGetAddress {
    pub fn new() -> EthereumGetAddress {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for EthereumGetAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumGetAddress {
        EthereumGetAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &EthereumGetAddress| { &m.address_n },
                    |m: &mut EthereumGetAddress| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "show_display",
                    |m: &EthereumGetAddress| { &m.show_display },
                    |m: &mut EthereumGetAddress| { &mut m.show_display },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EthereumGetAddress>(
                    "EthereumGetAddress",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EthereumGetAddress {
        static mut instance: ::protobuf::lazy::Lazy<EthereumGetAddress> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EthereumGetAddress,
        };
        unsafe {
            instance.get(EthereumGetAddress::new)
        }
    }
}

impl ::protobuf::Clear for EthereumGetAddress {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumGetAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumAddress {
    // message fields
    address: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumAddress {
    fn default() -> &'a EthereumAddress {
        <EthereumAddress as ::protobuf::Message>::default_instance()
    }
}

impl EthereumAddress {
    pub fn new() -> EthereumAddress {
        ::std::default::Default::default()
    }

    // required bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        match self.address.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        self.address.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EthereumAddress {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumAddress {
        EthereumAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "address",
                    |m: &EthereumAddress| { &m.address },
                    |m: &mut EthereumAddress| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EthereumAddress>(
                    "EthereumAddress",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EthereumAddress {
        static mut instance: ::protobuf::lazy::Lazy<EthereumAddress> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EthereumAddress,
        };
        unsafe {
            instance.get(EthereumAddress::new)
        }
    }
}

impl ::protobuf::Clear for EthereumAddress {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumSignTx {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    nonce: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    gas_price: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    gas_limit: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    to: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    data_initial_chunk: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    data_length: ::std::option::Option<u32>,
    chain_id: ::std::option::Option<u32>,
    tx_type: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumSignTx {
    fn default() -> &'a EthereumSignTx {
        <EthereumSignTx as ::protobuf::Message>::default_instance()
    }
}

impl EthereumSignTx {
    pub fn new() -> EthereumSignTx {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bytes nonce = 2;


    pub fn get_nonce(&self) -> &[u8] {
        match self.nonce.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::vec::Vec<u8>) {
        self.nonce = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.nonce.is_none() {
            self.nonce.set_default();
        }
        self.nonce.as_mut().unwrap()
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::vec::Vec<u8> {
        self.nonce.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes gas_price = 3;


    pub fn get_gas_price(&self) -> &[u8] {
        match self.gas_price.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_gas_price(&mut self) {
        self.gas_price.clear();
    }

    pub fn has_gas_price(&self) -> bool {
        self.gas_price.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_price(&mut self, v: ::std::vec::Vec<u8>) {
        self.gas_price = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gas_price(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.gas_price.is_none() {
            self.gas_price.set_default();
        }
        self.gas_price.as_mut().unwrap()
    }

    // Take field
    pub fn take_gas_price(&mut self) -> ::std::vec::Vec<u8> {
        self.gas_price.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes gas_limit = 4;


    pub fn get_gas_limit(&self) -> &[u8] {
        match self.gas_limit.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_gas_limit(&mut self) {
        self.gas_limit.clear();
    }

    pub fn has_gas_limit(&self) -> bool {
        self.gas_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: ::std::vec::Vec<u8>) {
        self.gas_limit = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gas_limit(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.gas_limit.is_none() {
            self.gas_limit.set_default();
        }
        self.gas_limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_gas_limit(&mut self) -> ::std::vec::Vec<u8> {
        self.gas_limit.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes to = 5;


    pub fn get_to(&self) -> &[u8] {
        match self.to.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    pub fn has_to(&self) -> bool {
        self.to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: ::std::vec::Vec<u8>) {
        self.to = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.to.is_none() {
            self.to.set_default();
        }
        self.to.as_mut().unwrap()
    }

    // Take field
    pub fn take_to(&mut self) -> ::std::vec::Vec<u8> {
        self.to.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes value = 6;


    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes data_initial_chunk = 7;


    pub fn get_data_initial_chunk(&self) -> &[u8] {
        match self.data_initial_chunk.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_data_initial_chunk(&mut self) {
        self.data_initial_chunk.clear();
    }

    pub fn has_data_initial_chunk(&self) -> bool {
        self.data_initial_chunk.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_initial_chunk(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_initial_chunk = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_initial_chunk(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data_initial_chunk.is_none() {
            self.data_initial_chunk.set_default();
        }
        self.data_initial_chunk.as_mut().unwrap()
    }

    // Take field
    pub fn take_data_initial_chunk(&mut self) -> ::std::vec::Vec<u8> {
        self.data_initial_chunk.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 data_length = 8;


    pub fn get_data_length(&self) -> u32 {
        self.data_length.unwrap_or(0)
    }
    pub fn clear_data_length(&mut self) {
        self.data_length = ::std::option::Option::None;
    }

    pub fn has_data_length(&self) -> bool {
        self.data_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_length(&mut self, v: u32) {
        self.data_length = ::std::option::Option::Some(v);
    }

    // optional uint32 chain_id = 9;


    pub fn get_chain_id(&self) -> u32 {
        self.chain_id.unwrap_or(0)
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id = ::std::option::Option::None;
    }

    pub fn has_chain_id(&self) -> bool {
        self.chain_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: u32) {
        self.chain_id = ::std::option::Option::Some(v);
    }

    // optional uint32 tx_type = 10;


    pub fn get_tx_type(&self) -> u32 {
        self.tx_type.unwrap_or(0)
    }
    pub fn clear_tx_type(&mut self) {
        self.tx_type = ::std::option::Option::None;
    }

    pub fn has_tx_type(&self) -> bool {
        self.tx_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_type(&mut self, v: u32) {
        self.tx_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for EthereumSignTx {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.nonce)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.gas_price)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.gas_limit)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.to)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data_initial_chunk)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.data_length = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.chain_id = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tx_type = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.nonce.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.gas_price.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.gas_limit.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(ref v) = self.to.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(ref v) = self.data_initial_chunk.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        if let Some(v) = self.data_length {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.chain_id {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.tx_type {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.nonce.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.gas_price.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.gas_limit.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(ref v) = self.to.as_ref() {
            os.write_bytes(5, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(6, &v)?;
        }
        if let Some(ref v) = self.data_initial_chunk.as_ref() {
            os.write_bytes(7, &v)?;
        }
        if let Some(v) = self.data_length {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.chain_id {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.tx_type {
            os.write_uint32(10, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumSignTx {
        EthereumSignTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &EthereumSignTx| { &m.address_n },
                    |m: &mut EthereumSignTx| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "nonce",
                    |m: &EthereumSignTx| { &m.nonce },
                    |m: &mut EthereumSignTx| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "gas_price",
                    |m: &EthereumSignTx| { &m.gas_price },
                    |m: &mut EthereumSignTx| { &mut m.gas_price },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "gas_limit",
                    |m: &EthereumSignTx| { &m.gas_limit },
                    |m: &mut EthereumSignTx| { &mut m.gas_limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "to",
                    |m: &EthereumSignTx| { &m.to },
                    |m: &mut EthereumSignTx| { &mut m.to },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &EthereumSignTx| { &m.value },
                    |m: &mut EthereumSignTx| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data_initial_chunk",
                    |m: &EthereumSignTx| { &m.data_initial_chunk },
                    |m: &mut EthereumSignTx| { &mut m.data_initial_chunk },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "data_length",
                    |m: &EthereumSignTx| { &m.data_length },
                    |m: &mut EthereumSignTx| { &mut m.data_length },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "chain_id",
                    |m: &EthereumSignTx| { &m.chain_id },
                    |m: &mut EthereumSignTx| { &mut m.chain_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "tx_type",
                    |m: &EthereumSignTx| { &m.tx_type },
                    |m: &mut EthereumSignTx| { &mut m.tx_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EthereumSignTx>(
                    "EthereumSignTx",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EthereumSignTx {
        static mut instance: ::protobuf::lazy::Lazy<EthereumSignTx> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EthereumSignTx,
        };
        unsafe {
            instance.get(EthereumSignTx::new)
        }
    }
}

impl ::protobuf::Clear for EthereumSignTx {
    fn clear(&mut self) {
        self.address_n.clear();
        self.nonce.clear();
        self.gas_price.clear();
        self.gas_limit.clear();
        self.to.clear();
        self.value.clear();
        self.data_initial_chunk.clear();
        self.data_length = ::std::option::Option::None;
        self.chain_id = ::std::option::Option::None;
        self.tx_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumSignTx {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumTxRequest {
    // message fields
    data_length: ::std::option::Option<u32>,
    signature_v: ::std::option::Option<u32>,
    signature_r: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature_s: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumTxRequest {
    fn default() -> &'a EthereumTxRequest {
        <EthereumTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl EthereumTxRequest {
    pub fn new() -> EthereumTxRequest {
        ::std::default::Default::default()
    }

    // optional uint32 data_length = 1;


    pub fn get_data_length(&self) -> u32 {
        self.data_length.unwrap_or(0)
    }
    pub fn clear_data_length(&mut self) {
        self.data_length = ::std::option::Option::None;
    }

    pub fn has_data_length(&self) -> bool {
        self.data_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_length(&mut self, v: u32) {
        self.data_length = ::std::option::Option::Some(v);
    }

    // optional uint32 signature_v = 2;


    pub fn get_signature_v(&self) -> u32 {
        self.signature_v.unwrap_or(0)
    }
    pub fn clear_signature_v(&mut self) {
        self.signature_v = ::std::option::Option::None;
    }

    pub fn has_signature_v(&self) -> bool {
        self.signature_v.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_v(&mut self, v: u32) {
        self.signature_v = ::std::option::Option::Some(v);
    }

    // optional bytes signature_r = 3;


    pub fn get_signature_r(&self) -> &[u8] {
        match self.signature_r.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature_r(&mut self) {
        self.signature_r.clear();
    }

    pub fn has_signature_r(&self) -> bool {
        self.signature_r.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_r(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature_r = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature_r(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature_r.is_none() {
            self.signature_r.set_default();
        }
        self.signature_r.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature_r(&mut self) -> ::std::vec::Vec<u8> {
        self.signature_r.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature_s = 4;


    pub fn get_signature_s(&self) -> &[u8] {
        match self.signature_s.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature_s(&mut self) {
        self.signature_s.clear();
    }

    pub fn has_signature_s(&self) -> bool {
        self.signature_s.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_s(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature_s = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature_s(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature_s.is_none() {
            self.signature_s.set_default();
        }
        self.signature_s.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature_s(&mut self) -> ::std::vec::Vec<u8> {
        self.signature_s.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EthereumTxRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.data_length = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.signature_v = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature_r)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature_s)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.data_length {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.signature_v {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.signature_r.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.signature_s.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.data_length {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.signature_v {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.signature_r.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.signature_s.as_ref() {
            os.write_bytes(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumTxRequest {
        EthereumTxRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "data_length",
                    |m: &EthereumTxRequest| { &m.data_length },
                    |m: &mut EthereumTxRequest| { &mut m.data_length },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "signature_v",
                    |m: &EthereumTxRequest| { &m.signature_v },
                    |m: &mut EthereumTxRequest| { &mut m.signature_v },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature_r",
                    |m: &EthereumTxRequest| { &m.signature_r },
                    |m: &mut EthereumTxRequest| { &mut m.signature_r },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature_s",
                    |m: &EthereumTxRequest| { &m.signature_s },
                    |m: &mut EthereumTxRequest| { &mut m.signature_s },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EthereumTxRequest>(
                    "EthereumTxRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EthereumTxRequest {
        static mut instance: ::protobuf::lazy::Lazy<EthereumTxRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EthereumTxRequest,
        };
        unsafe {
            instance.get(EthereumTxRequest::new)
        }
    }
}

impl ::protobuf::Clear for EthereumTxRequest {
    fn clear(&mut self) {
        self.data_length = ::std::option::Option::None;
        self.signature_v = ::std::option::Option::None;
        self.signature_r.clear();
        self.signature_s.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumTxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumTxAck {
    // message fields
    data_chunk: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumTxAck {
    fn default() -> &'a EthereumTxAck {
        <EthereumTxAck as ::protobuf::Message>::default_instance()
    }
}

impl EthereumTxAck {
    pub fn new() -> EthereumTxAck {
        ::std::default::Default::default()
    }

    // optional bytes data_chunk = 1;


    pub fn get_data_chunk(&self) -> &[u8] {
        match self.data_chunk.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_data_chunk(&mut self) {
        self.data_chunk.clear();
    }

    pub fn has_data_chunk(&self) -> bool {
        self.data_chunk.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_chunk(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_chunk = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_chunk(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data_chunk.is_none() {
            self.data_chunk.set_default();
        }
        self.data_chunk.as_mut().unwrap()
    }

    // Take field
    pub fn take_data_chunk(&mut self) -> ::std::vec::Vec<u8> {
        self.data_chunk.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EthereumTxAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data_chunk)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.data_chunk.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.data_chunk.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumTxAck {
        EthereumTxAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data_chunk",
                    |m: &EthereumTxAck| { &m.data_chunk },
                    |m: &mut EthereumTxAck| { &mut m.data_chunk },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EthereumTxAck>(
                    "EthereumTxAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EthereumTxAck {
        static mut instance: ::protobuf::lazy::Lazy<EthereumTxAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EthereumTxAck,
        };
        unsafe {
            instance.get(EthereumTxAck::new)
        }
    }
}

impl ::protobuf::Clear for EthereumTxAck {
    fn clear(&mut self) {
        self.data_chunk.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumTxAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumTxAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumSignMessage {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    message: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumSignMessage {
    fn default() -> &'a EthereumSignMessage {
        <EthereumSignMessage as ::protobuf::Message>::default_instance()
    }
}

impl EthereumSignMessage {
    pub fn new() -> EthereumSignMessage {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // required bytes message = 2;


    pub fn get_message(&self) -> &[u8] {
        match self.message.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        self.message.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EthereumSignMessage {
    fn is_initialized(&self) -> bool {
        if self.message.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.message.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.message.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumSignMessage {
        EthereumSignMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &EthereumSignMessage| { &m.address_n },
                    |m: &mut EthereumSignMessage| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "message",
                    |m: &EthereumSignMessage| { &m.message },
                    |m: &mut EthereumSignMessage| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EthereumSignMessage>(
                    "EthereumSignMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EthereumSignMessage {
        static mut instance: ::protobuf::lazy::Lazy<EthereumSignMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EthereumSignMessage,
        };
        unsafe {
            instance.get(EthereumSignMessage::new)
        }
    }
}

impl ::protobuf::Clear for EthereumSignMessage {
    fn clear(&mut self) {
        self.address_n.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumSignMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumSignMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumMessageSignature {
    // message fields
    address: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumMessageSignature {
    fn default() -> &'a EthereumMessageSignature {
        <EthereumMessageSignature as ::protobuf::Message>::default_instance()
    }
}

impl EthereumMessageSignature {
    pub fn new() -> EthereumMessageSignature {
        ::std::default::Default::default()
    }

    // optional bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        match self.address.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        self.address.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EthereumMessageSignature {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumMessageSignature {
        EthereumMessageSignature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "address",
                    |m: &EthereumMessageSignature| { &m.address },
                    |m: &mut EthereumMessageSignature| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &EthereumMessageSignature| { &m.signature },
                    |m: &mut EthereumMessageSignature| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EthereumMessageSignature>(
                    "EthereumMessageSignature",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EthereumMessageSignature {
        static mut instance: ::protobuf::lazy::Lazy<EthereumMessageSignature> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EthereumMessageSignature,
        };
        unsafe {
            instance.get(EthereumMessageSignature::new)
        }
    }
}

impl ::protobuf::Clear for EthereumMessageSignature {
    fn clear(&mut self) {
        self.address.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumMessageSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumMessageSignature {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EthereumVerifyMessage {
    // message fields
    address: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    message: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EthereumVerifyMessage {
    fn default() -> &'a EthereumVerifyMessage {
        <EthereumVerifyMessage as ::protobuf::Message>::default_instance()
    }
}

impl EthereumVerifyMessage {
    pub fn new() -> EthereumVerifyMessage {
        ::std::default::Default::default()
    }

    // optional bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        match self.address.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        self.address.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes message = 3;


    pub fn get_message(&self) -> &[u8] {
        match self.message.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        self.message.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EthereumVerifyMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.message.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.message.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EthereumVerifyMessage {
        EthereumVerifyMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "address",
                    |m: &EthereumVerifyMessage| { &m.address },
                    |m: &mut EthereumVerifyMessage| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &EthereumVerifyMessage| { &m.signature },
                    |m: &mut EthereumVerifyMessage| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "message",
                    |m: &EthereumVerifyMessage| { &m.message },
                    |m: &mut EthereumVerifyMessage| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EthereumVerifyMessage>(
                    "EthereumVerifyMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EthereumVerifyMessage {
        static mut instance: ::protobuf::lazy::Lazy<EthereumVerifyMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EthereumVerifyMessage,
        };
        unsafe {
            instance.get(EthereumVerifyMessage::new)
        }
    }
}

impl ::protobuf::Clear for EthereumVerifyMessage {
    fn clear(&mut self) {
        self.address.clear();
        self.signature.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EthereumVerifyMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EthereumVerifyMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17messages-ethereum.proto\x12\x1bhw.trezor.messages.ethereum\"T\n\
    \x12EthereumGetAddress\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addre\
    ssN\x12!\n\x0cshow_display\x18\x02\x20\x01(\x08R\x0bshowDisplay\"+\n\x0f\
    EthereumAddress\x12\x18\n\x07address\x18\x01\x20\x02(\x0cR\x07address\"\
    \xa6\x02\n\x0eEthereumSignTx\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\
    \x08addressN\x12\x14\n\x05nonce\x18\x02\x20\x01(\x0cR\x05nonce\x12\x1b\n\
    \tgas_price\x18\x03\x20\x01(\x0cR\x08gasPrice\x12\x1b\n\tgas_limit\x18\
    \x04\x20\x01(\x0cR\x08gasLimit\x12\x0e\n\x02to\x18\x05\x20\x01(\x0cR\x02\
    to\x12\x14\n\x05value\x18\x06\x20\x01(\x0cR\x05value\x12,\n\x12data_init\
    ial_chunk\x18\x07\x20\x01(\x0cR\x10dataInitialChunk\x12\x1f\n\x0bdata_le\
    ngth\x18\x08\x20\x01(\rR\ndataLength\x12\x19\n\x08chain_id\x18\t\x20\x01\
    (\rR\x07chainId\x12\x17\n\x07tx_type\x18\n\x20\x01(\rR\x06txType\"\x97\
    \x01\n\x11EthereumTxRequest\x12\x1f\n\x0bdata_length\x18\x01\x20\x01(\rR\
    \ndataLength\x12\x1f\n\x0bsignature_v\x18\x02\x20\x01(\rR\nsignatureV\
    \x12\x1f\n\x0bsignature_r\x18\x03\x20\x01(\x0cR\nsignatureR\x12\x1f\n\
    \x0bsignature_s\x18\x04\x20\x01(\x0cR\nsignatureS\".\n\rEthereumTxAck\
    \x12\x1d\n\ndata_chunk\x18\x01\x20\x01(\x0cR\tdataChunk\"L\n\x13Ethereum\
    SignMessage\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12\x18\
    \n\x07message\x18\x02\x20\x02(\x0cR\x07message\"R\n\x18EthereumMessageSi\
    gnature\x12\x18\n\x07address\x18\x01\x20\x01(\x0cR\x07address\x12\x1c\n\
    \tsignature\x18\x02\x20\x01(\x0cR\tsignature\"i\n\x15EthereumVerifyMessa\
    ge\x12\x18\n\x07address\x18\x01\x20\x01(\x0cR\x07address\x12\x1c\n\tsign\
    ature\x18\x02\x20\x01(\x0cR\tsignature\x12\x18\n\x07message\x18\x03\x20\
    \x01(\x0cR\x07messageB<\n#com.satoshilabs.trezor.lib.protobufB\x15Trezor\
    MessageEthereumJ\xd3\x1f\n\x06\x12\x04\0\0c\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08#\n\x08\n\x01\x08\x12\x03\x04\0<\
    \n.\n\x02\x08\x01\x12\x03\x04\0<\x1a#\x20Sugar\x20for\x20easier\x20handl\
    ing\x20in\x20Java\n\n\x08\n\x01\x08\x12\x03\x05\06\n\t\n\x02\x08\x08\x12\
    \x03\x05\06\n\x86\x01\n\x02\x04\0\x12\x04\r\0\x10\x01\x1az*\n\x20Request\
    :\x20Ask\x20device\x20for\x20Ethereum\x20address\x20corresponding\x20to\
    \x20address_n\x20path\n\x20@start\n\x20@next\x20EthereumAddress\n\x20@ne\
    xt\x20Failure\n\n\n\n\x03\x04\0\x01\x12\x03\r\x08\x1a\n=\n\x04\x04\0\x02\
    \0\x12\x03\x0e\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\
    \x20from\x20master\x20node\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x0e\x04\
    \x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0e\r\x13\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x0e\x14\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\x20!\
    \nC\n\x04\x04\0\x02\x01\x12\x03\x0f\x04#\"6\x20optionally\x20show\x20on\
    \x20display\x20before\x20sending\x20the\x20result\n\n\x0c\n\x05\x04\0\
    \x02\x01\x04\x12\x03\x0f\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x0f\r\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\x12\x1e\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x0f!\"\n]\n\x02\x04\x01\x12\x04\x16\0\x18\x01\
    \x1aQ*\n\x20Response:\x20Contains\x20an\x20Ethereum\x20address\x20derive\
    d\x20from\x20device\x20private\x20seed\n\x20@end\n\n\n\n\x03\x04\x01\x01\
    \x12\x03\x16\x08\x17\n7\n\x04\x04\x01\x02\0\x12\x03\x17\x04\x1f\"*\x20Co\
    in\x20address\x20as\x20an\x20Ethereum\x20160\x20bit\x20hash\n\n\x0c\n\
    \x05\x04\x01\x02\0\x04\x12\x03\x17\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03\x17\r\x12\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x17\x13\x1a\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x17\x1d\x1e\n\xaa\x02\n\x02\x04\x02\
    \x12\x04\"\0-\x01\x1a\x9d\x02*\n\x20Request:\x20Ask\x20device\x20to\x20s\
    ign\x20transaction\n\x20All\x20fields\x20are\x20optional\x20from\x20the\
    \x20protocol's\x20point\x20of\x20view.\x20Each\x20field\x20defaults\x20t\
    o\x20value\x20`0`\x20if\x20missing.\n\x20Note:\x20the\x20first\x20at\x20\
    most\x201024\x20bytes\x20of\x20data\x20MUST\x20be\x20transmitted\x20as\
    \x20part\x20of\x20this\x20message.\n\x20@start\n\x20@next\x20EthereumTxR\
    equest\n\x20@next\x20Failure\n\n\n\n\x03\x04\x02\x01\x12\x03\"\x08\x16\n\
    =\n\x04\x04\x02\x02\0\x12\x03#\x04\"\"0\x20BIP-32\x20path\x20to\x20deriv\
    e\x20the\x20key\x20from\x20master\x20node\n\n\x0c\n\x05\x04\x02\x02\0\
    \x04\x12\x03#\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03#\r\x13\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03#\x14\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03#\x20!\n,\n\x04\x04\x02\x02\x01\x12\x03$\x04\x1d\"\x1f\x20<=256\
    \x20bit\x20unsigned\x20big\x20endian\n\n\x0c\n\x05\x04\x02\x02\x01\x04\
    \x12\x03$\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03$\r\x12\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03$\x13\x18\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03$\x1b\x1c\n5\n\x04\x04\x02\x02\x02\x12\x03%\x04!\"(\x20<=256\
    \x20bit\x20unsigned\x20big\x20endian\x20(in\x20wei)\n\n\x0c\n\x05\x04\
    \x02\x02\x02\x04\x12\x03%\x04\x0c\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03%\r\x12\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03%\x13\x1c\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03%\x1f\x20\n,\n\x04\x04\x02\x02\x03\x12\x03&\
    \x04!\"\x1f\x20<=256\x20bit\x20unsigned\x20big\x20endian\n\n\x0c\n\x05\
    \x04\x02\x02\x03\x04\x12\x03&\x04\x0c\n\x0c\n\x05\x04\x02\x02\x03\x05\
    \x12\x03&\r\x12\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03&\x13\x1c\n\x0c\n\
    \x05\x04\x02\x02\x03\x03\x12\x03&\x1f\x20\n#\n\x04\x04\x02\x02\x04\x12\
    \x03'\x04\x1a\"\x16\x20160\x20bit\x20address\x20hash\n\n\x0c\n\x05\x04\
    \x02\x02\x04\x04\x12\x03'\x04\x0c\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\
    \x03'\r\x12\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03'\x13\x15\n\x0c\n\x05\
    \x04\x02\x02\x04\x03\x12\x03'\x18\x19\n5\n\x04\x04\x02\x02\x05\x12\x03(\
    \x04\x1d\"(\x20<=256\x20bit\x20unsigned\x20big\x20endian\x20(in\x20wei)\
    \n\n\x0c\n\x05\x04\x02\x02\x05\x04\x12\x03(\x04\x0c\n\x0c\n\x05\x04\x02\
    \x02\x05\x05\x12\x03(\r\x12\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03(\x13\
    \x18\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03(\x1b\x1c\n5\n\x04\x04\x02\
    \x02\x06\x12\x03)\x04*\"(\x20The\x20initial\x20data\x20chunk\x20(<=\x201\
    024\x20bytes)\n\n\x0c\n\x05\x04\x02\x02\x06\x04\x12\x03)\x04\x0c\n\x0c\n\
    \x05\x04\x02\x02\x06\x05\x12\x03)\r\x12\n\x0c\n\x05\x04\x02\x02\x06\x01\
    \x12\x03)\x13%\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03)()\n,\n\x04\x04\
    \x02\x02\x07\x12\x03*\x04$\"\x1f\x20Length\x20of\x20transaction\x20paylo\
    ad\n\n\x0c\n\x05\x04\x02\x02\x07\x04\x12\x03*\x04\x0c\n\x0c\n\x05\x04\
    \x02\x02\x07\x05\x12\x03*\r\x13\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\x03*\
    \x14\x1f\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03*\"#\n#\n\x04\x04\x02\
    \x02\x08\x12\x03+\x04!\"\x16\x20Chain\x20Id\x20for\x20EIP\x20155\n\n\x0c\
    \n\x05\x04\x02\x02\x08\x04\x12\x03+\x04\x0c\n\x0c\n\x05\x04\x02\x02\x08\
    \x05\x12\x03+\r\x13\n\x0c\n\x05\x04\x02\x02\x08\x01\x12\x03+\x14\x1c\n\
    \x0c\n\x05\x04\x02\x02\x08\x03\x12\x03+\x1f\x20\n\"\n\x04\x04\x02\x02\t\
    \x12\x03,\x04!\"\x15\x20(only\x20for\x20Wanchain)\n\n\x0c\n\x05\x04\x02\
    \x02\t\x04\x12\x03,\x04\x0c\n\x0c\n\x05\x04\x02\x02\t\x05\x12\x03,\r\x13\
    \n\x0c\n\x05\x04\x02\x02\t\x01\x12\x03,\x14\x1b\n\x0c\n\x05\x04\x02\x02\
    \t\x03\x12\x03,\x1e\x20\n\xbb\x02\n\x02\x04\x03\x12\x046\0;\x01\x1a\xae\
    \x02*\n\x20Response:\x20Device\x20asks\x20for\x20more\x20data\x20from\
    \x20transaction\x20payload,\x20or\x20returns\x20the\x20signature.\n\x20I\
    f\x20data_length\x20is\x20set,\x20device\x20awaits\x20that\x20many\x20mo\
    re\x20bytes\x20of\x20payload.\n\x20Otherwise,\x20the\x20signature_*\x20f\
    ields\x20contain\x20the\x20computed\x20transaction\x20signature.\x20All\
    \x20three\x20fields\x20will\x20be\x20present.\n\x20@end\n\x20@next\x20Et\
    hereumTxAck\n\n\n\n\x03\x04\x03\x01\x12\x036\x08\x19\n8\n\x04\x04\x03\
    \x02\0\x12\x037\x04$\"+\x20Number\x20of\x20bytes\x20being\x20requested\
    \x20(<=\x201024)\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x037\x04\x0c\n\x0c\
    \n\x05\x04\x03\x02\0\x05\x12\x037\r\x13\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x037\x14\x1f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x037\"#\nK\n\x04\x04\
    \x03\x02\x01\x12\x038\x04$\">\x20Computed\x20signature\x20(recovery\x20p\
    arameter,\x20limited\x20to\x2027\x20or\x2028)\n\n\x0c\n\x05\x04\x03\x02\
    \x01\x04\x12\x038\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x038\r\x13\
    \n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x038\x14\x1f\n\x0c\n\x05\x04\x03\
    \x02\x01\x03\x12\x038\"#\n7\n\x04\x04\x03\x02\x02\x12\x039\x04#\"*\x20Co\
    mputed\x20signature\x20R\x20component\x20(256\x20bit)\n\n\x0c\n\x05\x04\
    \x03\x02\x02\x04\x12\x039\x04\x0c\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\
    \x039\r\x12\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x039\x13\x1e\n\x0c\n\x05\
    \x04\x03\x02\x02\x03\x12\x039!\"\n7\n\x04\x04\x03\x02\x03\x12\x03:\x04#\
    \"*\x20Computed\x20signature\x20S\x20component\x20(256\x20bit)\n\n\x0c\n\
    \x05\x04\x03\x02\x03\x04\x12\x03:\x04\x0c\n\x0c\n\x05\x04\x03\x02\x03\
    \x05\x12\x03:\r\x12\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03:\x13\x1e\n\
    \x0c\n\x05\x04\x03\x02\x03\x03\x12\x03:!\"\nK\n\x02\x04\x04\x12\x04A\0C\
    \x01\x1a?*\n\x20Request:\x20Transaction\x20payload\x20data.\n\x20@next\
    \x20EthereumTxRequest\n\n\n\n\x03\x04\x04\x01\x12\x03A\x08\x15\n=\n\x04\
    \x04\x04\x02\0\x12\x03B\x04\"\"0\x20Bytes\x20from\x20transaction\x20payl\
    oad\x20(<=\x201024\x20bytes)\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03B\
    \x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03B\r\x12\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03B\x13\x1d\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03B\
    \x20!\nj\n\x02\x04\x05\x12\x04K\0N\x01\x1a^*\n\x20Request:\x20Ask\x20dev\
    ice\x20to\x20sign\x20message\n\x20@start\n\x20@next\x20EthereumMessageSi\
    gnature\n\x20@next\x20Failure\n\n\n\n\x03\x04\x05\x01\x12\x03K\x08\x1b\n\
    =\n\x04\x04\x05\x02\0\x12\x03L\x04\"\"0\x20BIP-32\x20path\x20to\x20deriv\
    e\x20the\x20key\x20from\x20master\x20node\n\n\x0c\n\x05\x04\x05\x02\0\
    \x04\x12\x03L\x04\x0c\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03L\r\x13\n\x0c\
    \n\x05\x04\x05\x02\0\x01\x12\x03L\x14\x1d\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03L\x20!\n#\n\x04\x04\x05\x02\x01\x12\x03M\x04\x1f\"\x16\x20messag\
    e\x20to\x20be\x20signed\n\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03M\x04\
    \x0c\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03M\r\x12\n\x0c\n\x05\x04\x05\
    \x02\x01\x01\x12\x03M\x13\x1a\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03M\
    \x1d\x1e\n.\n\x02\x04\x06\x12\x04T\0W\x01\x1a\"*\n\x20Response:\x20Signe\
    d\x20message\n\x20@end\n\n\n\n\x03\x04\x06\x01\x12\x03T\x08\x20\n/\n\x04\
    \x04\x06\x02\0\x12\x03U\x04\x1f\"\"\x20address\x20used\x20to\x20sign\x20\
    the\x20message\n\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03U\x04\x0c\n\x0c\n\
    \x05\x04\x06\x02\0\x05\x12\x03U\r\x12\n\x0c\n\x05\x04\x06\x02\0\x01\x12\
    \x03U\x13\x1a\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03U\x1d\x1e\n'\n\x04\
    \x04\x06\x02\x01\x12\x03V\x04!\"\x1a\x20signature\x20of\x20the\x20messag\
    e\n\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03V\x04\x0c\n\x0c\n\x05\x04\x06\
    \x02\x01\x05\x12\x03V\r\x12\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03V\x13\
    \x1c\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03V\x1f\x20\n[\n\x02\x04\x07\
    \x12\x04_\0c\x01\x1aO*\n\x20Request:\x20Ask\x20device\x20to\x20verify\
    \x20message\n\x20@start\n\x20@next\x20Success\n\x20@next\x20Failure\n\n\
    \n\n\x03\x04\x07\x01\x12\x03_\x08\x1d\n\x20\n\x04\x04\x07\x02\0\x12\x03`\
    \x04\x1f\"\x13\x20address\x20to\x20verify\n\n\x0c\n\x05\x04\x07\x02\0\
    \x04\x12\x03`\x04\x0c\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03`\r\x12\n\x0c\
    \n\x05\x04\x07\x02\0\x01\x12\x03`\x13\x1a\n\x0c\n\x05\x04\x07\x02\0\x03\
    \x12\x03`\x1d\x1e\n\"\n\x04\x04\x07\x02\x01\x12\x03a\x04!\"\x15\x20signa\
    ture\x20to\x20verify\n\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03a\x04\x0c\
    \n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03a\r\x12\n\x0c\n\x05\x04\x07\x02\
    \x01\x01\x12\x03a\x13\x1c\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03a\x1f\
    \x20\n\x20\n\x04\x04\x07\x02\x02\x12\x03b\x04\x1f\"\x13\x20message\x20to\
    \x20verify\n\n\x0c\n\x05\x04\x07\x02\x02\x04\x12\x03b\x04\x0c\n\x0c\n\
    \x05\x04\x07\x02\x02\x05\x12\x03b\r\x12\n\x0c\n\x05\x04\x07\x02\x02\x01\
    \x12\x03b\x13\x1a\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03b\x1d\x1e\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
