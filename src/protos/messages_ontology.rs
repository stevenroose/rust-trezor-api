// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages-ontology.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct OntologyTransaction {
    // message fields
    version: ::std::option::Option<u32>,
    field_type: ::std::option::Option<u32>,
    nonce: ::std::option::Option<u32>,
    gas_price: ::std::option::Option<u64>,
    gas_limit: ::std::option::Option<u64>,
    payer: ::protobuf::SingularField<::std::string::String>,
    tx_attributes: ::protobuf::RepeatedField<OntologyTransaction_OntologyTxAttribute>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologyTransaction {
    fn default() -> &'a OntologyTransaction {
        <OntologyTransaction as ::protobuf::Message>::default_instance()
    }
}

impl OntologyTransaction {
    pub fn new() -> OntologyTransaction {
        ::std::default::Default::default()
    }

    // optional uint32 version = 1;


    pub fn get_version(&self) -> u32 {
        self.version.unwrap_or(0)
    }
    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional uint32 type = 2;


    pub fn get_field_type(&self) -> u32 {
        self.field_type.unwrap_or(0)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: u32) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // optional uint32 nonce = 3;


    pub fn get_nonce(&self) -> u32 {
        self.nonce.unwrap_or(0)
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = ::std::option::Option::None;
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u32) {
        self.nonce = ::std::option::Option::Some(v);
    }

    // optional uint64 gas_price = 4;


    pub fn get_gas_price(&self) -> u64 {
        self.gas_price.unwrap_or(0)
    }
    pub fn clear_gas_price(&mut self) {
        self.gas_price = ::std::option::Option::None;
    }

    pub fn has_gas_price(&self) -> bool {
        self.gas_price.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_price(&mut self, v: u64) {
        self.gas_price = ::std::option::Option::Some(v);
    }

    // optional uint64 gas_limit = 5;


    pub fn get_gas_limit(&self) -> u64 {
        self.gas_limit.unwrap_or(0)
    }
    pub fn clear_gas_limit(&mut self) {
        self.gas_limit = ::std::option::Option::None;
    }

    pub fn has_gas_limit(&self) -> bool {
        self.gas_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: u64) {
        self.gas_limit = ::std::option::Option::Some(v);
    }

    // optional string payer = 6;


    pub fn get_payer(&self) -> &str {
        match self.payer.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_payer(&mut self) {
        self.payer.clear();
    }

    pub fn has_payer(&self) -> bool {
        self.payer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payer(&mut self, v: ::std::string::String) {
        self.payer = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payer(&mut self) -> &mut ::std::string::String {
        if self.payer.is_none() {
            self.payer.set_default();
        }
        self.payer.as_mut().unwrap()
    }

    // Take field
    pub fn take_payer(&mut self) -> ::std::string::String {
        self.payer.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .OntologyTransaction.OntologyTxAttribute tx_attributes = 7;


    pub fn get_tx_attributes(&self) -> &[OntologyTransaction_OntologyTxAttribute] {
        &self.tx_attributes
    }
    pub fn clear_tx_attributes(&mut self) {
        self.tx_attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_attributes(&mut self, v: ::protobuf::RepeatedField<OntologyTransaction_OntologyTxAttribute>) {
        self.tx_attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tx_attributes(&mut self) -> &mut ::protobuf::RepeatedField<OntologyTransaction_OntologyTxAttribute> {
        &mut self.tx_attributes
    }

    // Take field
    pub fn take_tx_attributes(&mut self) -> ::protobuf::RepeatedField<OntologyTransaction_OntologyTxAttribute> {
        ::std::mem::replace(&mut self.tx_attributes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OntologyTransaction {
    fn is_initialized(&self) -> bool {
        for v in &self.tx_attributes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.field_type = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.nonce = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_price = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_limit = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.payer)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tx_attributes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.nonce {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gas_price {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gas_limit {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.payer.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        for value in &self.tx_attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.field_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.nonce {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.gas_price {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.gas_limit {
            os.write_uint64(5, v)?;
        }
        if let Some(ref v) = self.payer.as_ref() {
            os.write_string(6, &v)?;
        }
        for v in &self.tx_attributes {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologyTransaction {
        OntologyTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "version",
                    |m: &OntologyTransaction| { &m.version },
                    |m: &mut OntologyTransaction| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "type",
                    |m: &OntologyTransaction| { &m.field_type },
                    |m: &mut OntologyTransaction| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "nonce",
                    |m: &OntologyTransaction| { &m.nonce },
                    |m: &mut OntologyTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "gas_price",
                    |m: &OntologyTransaction| { &m.gas_price },
                    |m: &mut OntologyTransaction| { &mut m.gas_price },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "gas_limit",
                    |m: &OntologyTransaction| { &m.gas_limit },
                    |m: &mut OntologyTransaction| { &mut m.gas_limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "payer",
                    |m: &OntologyTransaction| { &m.payer },
                    |m: &mut OntologyTransaction| { &mut m.payer },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OntologyTransaction_OntologyTxAttribute>>(
                    "tx_attributes",
                    |m: &OntologyTransaction| { &m.tx_attributes },
                    |m: &mut OntologyTransaction| { &mut m.tx_attributes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologyTransaction>(
                    "OntologyTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologyTransaction {
        static mut instance: ::protobuf::lazy::Lazy<OntologyTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologyTransaction,
        };
        unsafe {
            instance.get(OntologyTransaction::new)
        }
    }
}

impl ::protobuf::Clear for OntologyTransaction {
    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.nonce = ::std::option::Option::None;
        self.gas_price = ::std::option::Option::None;
        self.gas_limit = ::std::option::Option::None;
        self.payer.clear();
        self.tx_attributes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologyTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologyTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologyTransaction_OntologyTxAttribute {
    // message fields
    usage: ::std::option::Option<u32>,
    data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologyTransaction_OntologyTxAttribute {
    fn default() -> &'a OntologyTransaction_OntologyTxAttribute {
        <OntologyTransaction_OntologyTxAttribute as ::protobuf::Message>::default_instance()
    }
}

impl OntologyTransaction_OntologyTxAttribute {
    pub fn new() -> OntologyTransaction_OntologyTxAttribute {
        ::std::default::Default::default()
    }

    // optional uint32 usage = 1;


    pub fn get_usage(&self) -> u32 {
        self.usage.unwrap_or(0)
    }
    pub fn clear_usage(&mut self) {
        self.usage = ::std::option::Option::None;
    }

    pub fn has_usage(&self) -> bool {
        self.usage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_usage(&mut self, v: u32) {
        self.usage = ::std::option::Option::Some(v);
    }

    // optional bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for OntologyTransaction_OntologyTxAttribute {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.usage = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.usage {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.usage {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologyTransaction_OntologyTxAttribute {
        OntologyTransaction_OntologyTxAttribute::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "usage",
                    |m: &OntologyTransaction_OntologyTxAttribute| { &m.usage },
                    |m: &mut OntologyTransaction_OntologyTxAttribute| { &mut m.usage },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &OntologyTransaction_OntologyTxAttribute| { &m.data },
                    |m: &mut OntologyTransaction_OntologyTxAttribute| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologyTransaction_OntologyTxAttribute>(
                    "OntologyTransaction_OntologyTxAttribute",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologyTransaction_OntologyTxAttribute {
        static mut instance: ::protobuf::lazy::Lazy<OntologyTransaction_OntologyTxAttribute> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologyTransaction_OntologyTxAttribute,
        };
        unsafe {
            instance.get(OntologyTransaction_OntologyTxAttribute::new)
        }
    }
}

impl ::protobuf::Clear for OntologyTransaction_OntologyTxAttribute {
    fn clear(&mut self) {
        self.usage = ::std::option::Option::None;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologyTransaction_OntologyTxAttribute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologyTransaction_OntologyTxAttribute {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologyGetPublicKey {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologyGetPublicKey {
    fn default() -> &'a OntologyGetPublicKey {
        <OntologyGetPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl OntologyGetPublicKey {
    pub fn new() -> OntologyGetPublicKey {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for OntologyGetPublicKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologyGetPublicKey {
        OntologyGetPublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &OntologyGetPublicKey| { &m.address_n },
                    |m: &mut OntologyGetPublicKey| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "show_display",
                    |m: &OntologyGetPublicKey| { &m.show_display },
                    |m: &mut OntologyGetPublicKey| { &mut m.show_display },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologyGetPublicKey>(
                    "OntologyGetPublicKey",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologyGetPublicKey {
        static mut instance: ::protobuf::lazy::Lazy<OntologyGetPublicKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologyGetPublicKey,
        };
        unsafe {
            instance.get(OntologyGetPublicKey::new)
        }
    }
}

impl ::protobuf::Clear for OntologyGetPublicKey {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologyGetPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologyGetPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologyPublicKey {
    // message fields
    public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologyPublicKey {
    fn default() -> &'a OntologyPublicKey {
        <OntologyPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl OntologyPublicKey {
    pub fn new() -> OntologyPublicKey {
        ::std::default::Default::default()
    }

    // optional bytes public_key = 1;


    pub fn get_public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for OntologyPublicKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologyPublicKey {
        OntologyPublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "public_key",
                    |m: &OntologyPublicKey| { &m.public_key },
                    |m: &mut OntologyPublicKey| { &mut m.public_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologyPublicKey>(
                    "OntologyPublicKey",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologyPublicKey {
        static mut instance: ::protobuf::lazy::Lazy<OntologyPublicKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologyPublicKey,
        };
        unsafe {
            instance.get(OntologyPublicKey::new)
        }
    }
}

impl ::protobuf::Clear for OntologyPublicKey {
    fn clear(&mut self) {
        self.public_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologyPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologyPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologyGetAddress {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologyGetAddress {
    fn default() -> &'a OntologyGetAddress {
        <OntologyGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl OntologyGetAddress {
    pub fn new() -> OntologyGetAddress {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for OntologyGetAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologyGetAddress {
        OntologyGetAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &OntologyGetAddress| { &m.address_n },
                    |m: &mut OntologyGetAddress| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "show_display",
                    |m: &OntologyGetAddress| { &m.show_display },
                    |m: &mut OntologyGetAddress| { &mut m.show_display },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologyGetAddress>(
                    "OntologyGetAddress",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologyGetAddress {
        static mut instance: ::protobuf::lazy::Lazy<OntologyGetAddress> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologyGetAddress,
        };
        unsafe {
            instance.get(OntologyGetAddress::new)
        }
    }
}

impl ::protobuf::Clear for OntologyGetAddress {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologyGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologyGetAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologyAddress {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologyAddress {
    fn default() -> &'a OntologyAddress {
        <OntologyAddress as ::protobuf::Message>::default_instance()
    }
}

impl OntologyAddress {
    pub fn new() -> OntologyAddress {
        ::std::default::Default::default()
    }

    // optional string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for OntologyAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologyAddress {
        OntologyAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &OntologyAddress| { &m.address },
                    |m: &mut OntologyAddress| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologyAddress>(
                    "OntologyAddress",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologyAddress {
        static mut instance: ::protobuf::lazy::Lazy<OntologyAddress> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologyAddress,
        };
        unsafe {
            instance.get(OntologyAddress::new)
        }
    }
}

impl ::protobuf::Clear for OntologyAddress {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologyAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologyAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignTransfer {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    transaction: ::protobuf::SingularPtrField<OntologyTransaction>,
    transfer: ::protobuf::SingularPtrField<OntologySignTransfer_OntologyTransfer>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignTransfer {
    fn default() -> &'a OntologySignTransfer {
        <OntologySignTransfer as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignTransfer {
    pub fn new() -> OntologySignTransfer {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional .OntologyTransaction transaction = 2;


    pub fn get_transaction(&self) -> &OntologyTransaction {
        self.transaction.as_ref().unwrap_or_else(|| OntologyTransaction::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: OntologyTransaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut OntologyTransaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> OntologyTransaction {
        self.transaction.take().unwrap_or_else(|| OntologyTransaction::new())
    }

    // optional .OntologySignTransfer.OntologyTransfer transfer = 3;


    pub fn get_transfer(&self) -> &OntologySignTransfer_OntologyTransfer {
        self.transfer.as_ref().unwrap_or_else(|| OntologySignTransfer_OntologyTransfer::default_instance())
    }
    pub fn clear_transfer(&mut self) {
        self.transfer.clear();
    }

    pub fn has_transfer(&self) -> bool {
        self.transfer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transfer(&mut self, v: OntologySignTransfer_OntologyTransfer) {
        self.transfer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transfer(&mut self) -> &mut OntologySignTransfer_OntologyTransfer {
        if self.transfer.is_none() {
            self.transfer.set_default();
        }
        self.transfer.as_mut().unwrap()
    }

    // Take field
    pub fn take_transfer(&mut self) -> OntologySignTransfer_OntologyTransfer {
        self.transfer.take().unwrap_or_else(|| OntologySignTransfer_OntologyTransfer::new())
    }
}

impl ::protobuf::Message for OntologySignTransfer {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transfer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transfer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transfer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transfer.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignTransfer {
        OntologySignTransfer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &OntologySignTransfer| { &m.address_n },
                    |m: &mut OntologySignTransfer| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OntologyTransaction>>(
                    "transaction",
                    |m: &OntologySignTransfer| { &m.transaction },
                    |m: &mut OntologySignTransfer| { &mut m.transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OntologySignTransfer_OntologyTransfer>>(
                    "transfer",
                    |m: &OntologySignTransfer| { &m.transfer },
                    |m: &mut OntologySignTransfer| { &mut m.transfer },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignTransfer>(
                    "OntologySignTransfer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignTransfer {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignTransfer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignTransfer,
        };
        unsafe {
            instance.get(OntologySignTransfer::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignTransfer {
    fn clear(&mut self) {
        self.address_n.clear();
        self.transaction.clear();
        self.transfer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignTransfer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignTransfer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignTransfer_OntologyTransfer {
    // message fields
    asset: ::std::option::Option<OntologySignTransfer_OntologyTransfer_OntologyAsset>,
    amount: ::std::option::Option<u64>,
    from_address: ::protobuf::SingularField<::std::string::String>,
    to_address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignTransfer_OntologyTransfer {
    fn default() -> &'a OntologySignTransfer_OntologyTransfer {
        <OntologySignTransfer_OntologyTransfer as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignTransfer_OntologyTransfer {
    pub fn new() -> OntologySignTransfer_OntologyTransfer {
        ::std::default::Default::default()
    }

    // optional .OntologySignTransfer.OntologyTransfer.OntologyAsset asset = 1;


    pub fn get_asset(&self) -> OntologySignTransfer_OntologyTransfer_OntologyAsset {
        self.asset.unwrap_or(OntologySignTransfer_OntologyTransfer_OntologyAsset::ONT)
    }
    pub fn clear_asset(&mut self) {
        self.asset = ::std::option::Option::None;
    }

    pub fn has_asset(&self) -> bool {
        self.asset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asset(&mut self, v: OntologySignTransfer_OntologyTransfer_OntologyAsset) {
        self.asset = ::std::option::Option::Some(v);
    }

    // optional uint64 amount = 2;


    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional string from_address = 3;


    pub fn get_from_address(&self) -> &str {
        match self.from_address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_from_address(&mut self) {
        self.from_address.clear();
    }

    pub fn has_from_address(&self) -> bool {
        self.from_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_address(&mut self, v: ::std::string::String) {
        self.from_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from_address(&mut self) -> &mut ::std::string::String {
        if self.from_address.is_none() {
            self.from_address.set_default();
        }
        self.from_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_from_address(&mut self) -> ::std::string::String {
        self.from_address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string to_address = 4;


    pub fn get_to_address(&self) -> &str {
        match self.to_address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_to_address(&mut self) {
        self.to_address.clear();
    }

    pub fn has_to_address(&self) -> bool {
        self.to_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_address(&mut self, v: ::std::string::String) {
        self.to_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to_address(&mut self) -> &mut ::std::string::String {
        if self.to_address.is_none() {
            self.to_address.set_default();
        }
        self.to_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_to_address(&mut self) -> ::std::string::String {
        self.to_address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for OntologySignTransfer_OntologyTransfer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.asset, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.from_address)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.to_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.asset {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.from_address.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.to_address.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.asset {
            os.write_enum(1, v.value())?;
        }
        if let Some(v) = self.amount {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.from_address.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.to_address.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignTransfer_OntologyTransfer {
        OntologySignTransfer_OntologyTransfer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OntologySignTransfer_OntologyTransfer_OntologyAsset>>(
                    "asset",
                    |m: &OntologySignTransfer_OntologyTransfer| { &m.asset },
                    |m: &mut OntologySignTransfer_OntologyTransfer| { &mut m.asset },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &OntologySignTransfer_OntologyTransfer| { &m.amount },
                    |m: &mut OntologySignTransfer_OntologyTransfer| { &mut m.amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "from_address",
                    |m: &OntologySignTransfer_OntologyTransfer| { &m.from_address },
                    |m: &mut OntologySignTransfer_OntologyTransfer| { &mut m.from_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "to_address",
                    |m: &OntologySignTransfer_OntologyTransfer| { &m.to_address },
                    |m: &mut OntologySignTransfer_OntologyTransfer| { &mut m.to_address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignTransfer_OntologyTransfer>(
                    "OntologySignTransfer_OntologyTransfer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignTransfer_OntologyTransfer {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignTransfer_OntologyTransfer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignTransfer_OntologyTransfer,
        };
        unsafe {
            instance.get(OntologySignTransfer_OntologyTransfer::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignTransfer_OntologyTransfer {
    fn clear(&mut self) {
        self.asset = ::std::option::Option::None;
        self.amount = ::std::option::Option::None;
        self.from_address.clear();
        self.to_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignTransfer_OntologyTransfer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignTransfer_OntologyTransfer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OntologySignTransfer_OntologyTransfer_OntologyAsset {
    ONT = 1,
    ONG = 2,
}

impl ::protobuf::ProtobufEnum for OntologySignTransfer_OntologyTransfer_OntologyAsset {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OntologySignTransfer_OntologyTransfer_OntologyAsset> {
        match value {
            1 => ::std::option::Option::Some(OntologySignTransfer_OntologyTransfer_OntologyAsset::ONT),
            2 => ::std::option::Option::Some(OntologySignTransfer_OntologyTransfer_OntologyAsset::ONG),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OntologySignTransfer_OntologyTransfer_OntologyAsset] = &[
            OntologySignTransfer_OntologyTransfer_OntologyAsset::ONT,
            OntologySignTransfer_OntologyTransfer_OntologyAsset::ONG,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("OntologySignTransfer_OntologyTransfer_OntologyAsset", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for OntologySignTransfer_OntologyTransfer_OntologyAsset {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for OntologySignTransfer_OntologyTransfer_OntologyAsset {
    fn default() -> Self {
        OntologySignTransfer_OntologyTransfer_OntologyAsset::ONT
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignTransfer_OntologyTransfer_OntologyAsset {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignedTransfer {
    // message fields
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    payload: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignedTransfer {
    fn default() -> &'a OntologySignedTransfer {
        <OntologySignedTransfer as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignedTransfer {
    pub fn new() -> OntologySignedTransfer {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes payload = 2;


    pub fn get_payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for OntologySignedTransfer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignedTransfer {
        OntologySignedTransfer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &OntologySignedTransfer| { &m.signature },
                    |m: &mut OntologySignedTransfer| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &OntologySignedTransfer| { &m.payload },
                    |m: &mut OntologySignedTransfer| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignedTransfer>(
                    "OntologySignedTransfer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignedTransfer {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignedTransfer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignedTransfer,
        };
        unsafe {
            instance.get(OntologySignedTransfer::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignedTransfer {
    fn clear(&mut self) {
        self.signature.clear();
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignedTransfer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignedTransfer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignWithdrawOng {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    transaction: ::protobuf::SingularPtrField<OntologyTransaction>,
    withdraw_ong: ::protobuf::SingularPtrField<OntologySignWithdrawOng_OntologyWithdrawOng>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignWithdrawOng {
    fn default() -> &'a OntologySignWithdrawOng {
        <OntologySignWithdrawOng as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignWithdrawOng {
    pub fn new() -> OntologySignWithdrawOng {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional .OntologyTransaction transaction = 2;


    pub fn get_transaction(&self) -> &OntologyTransaction {
        self.transaction.as_ref().unwrap_or_else(|| OntologyTransaction::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: OntologyTransaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut OntologyTransaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> OntologyTransaction {
        self.transaction.take().unwrap_or_else(|| OntologyTransaction::new())
    }

    // optional .OntologySignWithdrawOng.OntologyWithdrawOng withdraw_ong = 3;


    pub fn get_withdraw_ong(&self) -> &OntologySignWithdrawOng_OntologyWithdrawOng {
        self.withdraw_ong.as_ref().unwrap_or_else(|| OntologySignWithdrawOng_OntologyWithdrawOng::default_instance())
    }
    pub fn clear_withdraw_ong(&mut self) {
        self.withdraw_ong.clear();
    }

    pub fn has_withdraw_ong(&self) -> bool {
        self.withdraw_ong.is_some()
    }

    // Param is passed by value, moved
    pub fn set_withdraw_ong(&mut self, v: OntologySignWithdrawOng_OntologyWithdrawOng) {
        self.withdraw_ong = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_withdraw_ong(&mut self) -> &mut OntologySignWithdrawOng_OntologyWithdrawOng {
        if self.withdraw_ong.is_none() {
            self.withdraw_ong.set_default();
        }
        self.withdraw_ong.as_mut().unwrap()
    }

    // Take field
    pub fn take_withdraw_ong(&mut self) -> OntologySignWithdrawOng_OntologyWithdrawOng {
        self.withdraw_ong.take().unwrap_or_else(|| OntologySignWithdrawOng_OntologyWithdrawOng::new())
    }
}

impl ::protobuf::Message for OntologySignWithdrawOng {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.withdraw_ong {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.withdraw_ong)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.withdraw_ong.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.withdraw_ong.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignWithdrawOng {
        OntologySignWithdrawOng::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &OntologySignWithdrawOng| { &m.address_n },
                    |m: &mut OntologySignWithdrawOng| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OntologyTransaction>>(
                    "transaction",
                    |m: &OntologySignWithdrawOng| { &m.transaction },
                    |m: &mut OntologySignWithdrawOng| { &mut m.transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OntologySignWithdrawOng_OntologyWithdrawOng>>(
                    "withdraw_ong",
                    |m: &OntologySignWithdrawOng| { &m.withdraw_ong },
                    |m: &mut OntologySignWithdrawOng| { &mut m.withdraw_ong },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignWithdrawOng>(
                    "OntologySignWithdrawOng",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignWithdrawOng {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignWithdrawOng> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignWithdrawOng,
        };
        unsafe {
            instance.get(OntologySignWithdrawOng::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignWithdrawOng {
    fn clear(&mut self) {
        self.address_n.clear();
        self.transaction.clear();
        self.withdraw_ong.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignWithdrawOng {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignWithdrawOng {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignWithdrawOng_OntologyWithdrawOng {
    // message fields
    amount: ::std::option::Option<u64>,
    from_address: ::protobuf::SingularField<::std::string::String>,
    to_address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignWithdrawOng_OntologyWithdrawOng {
    fn default() -> &'a OntologySignWithdrawOng_OntologyWithdrawOng {
        <OntologySignWithdrawOng_OntologyWithdrawOng as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignWithdrawOng_OntologyWithdrawOng {
    pub fn new() -> OntologySignWithdrawOng_OntologyWithdrawOng {
        ::std::default::Default::default()
    }

    // optional uint64 amount = 1;


    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional string from_address = 2;


    pub fn get_from_address(&self) -> &str {
        match self.from_address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_from_address(&mut self) {
        self.from_address.clear();
    }

    pub fn has_from_address(&self) -> bool {
        self.from_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_address(&mut self, v: ::std::string::String) {
        self.from_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from_address(&mut self) -> &mut ::std::string::String {
        if self.from_address.is_none() {
            self.from_address.set_default();
        }
        self.from_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_from_address(&mut self) -> ::std::string::String {
        self.from_address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string to_address = 3;


    pub fn get_to_address(&self) -> &str {
        match self.to_address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_to_address(&mut self) {
        self.to_address.clear();
    }

    pub fn has_to_address(&self) -> bool {
        self.to_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_address(&mut self, v: ::std::string::String) {
        self.to_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to_address(&mut self) -> &mut ::std::string::String {
        if self.to_address.is_none() {
            self.to_address.set_default();
        }
        self.to_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_to_address(&mut self) -> ::std::string::String {
        self.to_address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for OntologySignWithdrawOng_OntologyWithdrawOng {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.from_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.to_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.from_address.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.to_address.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.amount {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.from_address.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.to_address.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignWithdrawOng_OntologyWithdrawOng {
        OntologySignWithdrawOng_OntologyWithdrawOng::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &OntologySignWithdrawOng_OntologyWithdrawOng| { &m.amount },
                    |m: &mut OntologySignWithdrawOng_OntologyWithdrawOng| { &mut m.amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "from_address",
                    |m: &OntologySignWithdrawOng_OntologyWithdrawOng| { &m.from_address },
                    |m: &mut OntologySignWithdrawOng_OntologyWithdrawOng| { &mut m.from_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "to_address",
                    |m: &OntologySignWithdrawOng_OntologyWithdrawOng| { &m.to_address },
                    |m: &mut OntologySignWithdrawOng_OntologyWithdrawOng| { &mut m.to_address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignWithdrawOng_OntologyWithdrawOng>(
                    "OntologySignWithdrawOng_OntologyWithdrawOng",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignWithdrawOng_OntologyWithdrawOng {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignWithdrawOng_OntologyWithdrawOng> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignWithdrawOng_OntologyWithdrawOng,
        };
        unsafe {
            instance.get(OntologySignWithdrawOng_OntologyWithdrawOng::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignWithdrawOng_OntologyWithdrawOng {
    fn clear(&mut self) {
        self.amount = ::std::option::Option::None;
        self.from_address.clear();
        self.to_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignWithdrawOng_OntologyWithdrawOng {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignWithdrawOng_OntologyWithdrawOng {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignedWithdrawOng {
    // message fields
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    payload: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignedWithdrawOng {
    fn default() -> &'a OntologySignedWithdrawOng {
        <OntologySignedWithdrawOng as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignedWithdrawOng {
    pub fn new() -> OntologySignedWithdrawOng {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes payload = 2;


    pub fn get_payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for OntologySignedWithdrawOng {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignedWithdrawOng {
        OntologySignedWithdrawOng::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &OntologySignedWithdrawOng| { &m.signature },
                    |m: &mut OntologySignedWithdrawOng| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &OntologySignedWithdrawOng| { &m.payload },
                    |m: &mut OntologySignedWithdrawOng| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignedWithdrawOng>(
                    "OntologySignedWithdrawOng",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignedWithdrawOng {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignedWithdrawOng> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignedWithdrawOng,
        };
        unsafe {
            instance.get(OntologySignedWithdrawOng::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignedWithdrawOng {
    fn clear(&mut self) {
        self.signature.clear();
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignedWithdrawOng {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignedWithdrawOng {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignOntIdRegister {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    transaction: ::protobuf::SingularPtrField<OntologyTransaction>,
    ont_id_register: ::protobuf::SingularPtrField<OntologySignOntIdRegister_OntologyOntIdRegister>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignOntIdRegister {
    fn default() -> &'a OntologySignOntIdRegister {
        <OntologySignOntIdRegister as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignOntIdRegister {
    pub fn new() -> OntologySignOntIdRegister {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional .OntologyTransaction transaction = 2;


    pub fn get_transaction(&self) -> &OntologyTransaction {
        self.transaction.as_ref().unwrap_or_else(|| OntologyTransaction::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: OntologyTransaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut OntologyTransaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> OntologyTransaction {
        self.transaction.take().unwrap_or_else(|| OntologyTransaction::new())
    }

    // optional .OntologySignOntIdRegister.OntologyOntIdRegister ont_id_register = 3;


    pub fn get_ont_id_register(&self) -> &OntologySignOntIdRegister_OntologyOntIdRegister {
        self.ont_id_register.as_ref().unwrap_or_else(|| OntologySignOntIdRegister_OntologyOntIdRegister::default_instance())
    }
    pub fn clear_ont_id_register(&mut self) {
        self.ont_id_register.clear();
    }

    pub fn has_ont_id_register(&self) -> bool {
        self.ont_id_register.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ont_id_register(&mut self, v: OntologySignOntIdRegister_OntologyOntIdRegister) {
        self.ont_id_register = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ont_id_register(&mut self) -> &mut OntologySignOntIdRegister_OntologyOntIdRegister {
        if self.ont_id_register.is_none() {
            self.ont_id_register.set_default();
        }
        self.ont_id_register.as_mut().unwrap()
    }

    // Take field
    pub fn take_ont_id_register(&mut self) -> OntologySignOntIdRegister_OntologyOntIdRegister {
        self.ont_id_register.take().unwrap_or_else(|| OntologySignOntIdRegister_OntologyOntIdRegister::new())
    }
}

impl ::protobuf::Message for OntologySignOntIdRegister {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ont_id_register {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ont_id_register)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ont_id_register.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ont_id_register.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignOntIdRegister {
        OntologySignOntIdRegister::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &OntologySignOntIdRegister| { &m.address_n },
                    |m: &mut OntologySignOntIdRegister| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OntologyTransaction>>(
                    "transaction",
                    |m: &OntologySignOntIdRegister| { &m.transaction },
                    |m: &mut OntologySignOntIdRegister| { &mut m.transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OntologySignOntIdRegister_OntologyOntIdRegister>>(
                    "ont_id_register",
                    |m: &OntologySignOntIdRegister| { &m.ont_id_register },
                    |m: &mut OntologySignOntIdRegister| { &mut m.ont_id_register },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignOntIdRegister>(
                    "OntologySignOntIdRegister",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignOntIdRegister {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignOntIdRegister> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignOntIdRegister,
        };
        unsafe {
            instance.get(OntologySignOntIdRegister::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignOntIdRegister {
    fn clear(&mut self) {
        self.address_n.clear();
        self.transaction.clear();
        self.ont_id_register.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignOntIdRegister {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignOntIdRegister {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignOntIdRegister_OntologyOntIdRegister {
    // message fields
    ont_id: ::protobuf::SingularField<::std::string::String>,
    public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignOntIdRegister_OntologyOntIdRegister {
    fn default() -> &'a OntologySignOntIdRegister_OntologyOntIdRegister {
        <OntologySignOntIdRegister_OntologyOntIdRegister as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignOntIdRegister_OntologyOntIdRegister {
    pub fn new() -> OntologySignOntIdRegister_OntologyOntIdRegister {
        ::std::default::Default::default()
    }

    // optional string ont_id = 1;


    pub fn get_ont_id(&self) -> &str {
        match self.ont_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ont_id(&mut self) {
        self.ont_id.clear();
    }

    pub fn has_ont_id(&self) -> bool {
        self.ont_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ont_id(&mut self, v: ::std::string::String) {
        self.ont_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ont_id(&mut self) -> &mut ::std::string::String {
        if self.ont_id.is_none() {
            self.ont_id.set_default();
        }
        self.ont_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_ont_id(&mut self) -> ::std::string::String {
        self.ont_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes public_key = 2;


    pub fn get_public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for OntologySignOntIdRegister_OntologyOntIdRegister {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ont_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ont_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ont_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignOntIdRegister_OntologyOntIdRegister {
        OntologySignOntIdRegister_OntologyOntIdRegister::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ont_id",
                    |m: &OntologySignOntIdRegister_OntologyOntIdRegister| { &m.ont_id },
                    |m: &mut OntologySignOntIdRegister_OntologyOntIdRegister| { &mut m.ont_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "public_key",
                    |m: &OntologySignOntIdRegister_OntologyOntIdRegister| { &m.public_key },
                    |m: &mut OntologySignOntIdRegister_OntologyOntIdRegister| { &mut m.public_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignOntIdRegister_OntologyOntIdRegister>(
                    "OntologySignOntIdRegister_OntologyOntIdRegister",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignOntIdRegister_OntologyOntIdRegister {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignOntIdRegister_OntologyOntIdRegister> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignOntIdRegister_OntologyOntIdRegister,
        };
        unsafe {
            instance.get(OntologySignOntIdRegister_OntologyOntIdRegister::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignOntIdRegister_OntologyOntIdRegister {
    fn clear(&mut self) {
        self.ont_id.clear();
        self.public_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignOntIdRegister_OntologyOntIdRegister {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignOntIdRegister_OntologyOntIdRegister {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignedOntIdRegister {
    // message fields
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    payload: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignedOntIdRegister {
    fn default() -> &'a OntologySignedOntIdRegister {
        <OntologySignedOntIdRegister as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignedOntIdRegister {
    pub fn new() -> OntologySignedOntIdRegister {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes payload = 2;


    pub fn get_payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for OntologySignedOntIdRegister {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignedOntIdRegister {
        OntologySignedOntIdRegister::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &OntologySignedOntIdRegister| { &m.signature },
                    |m: &mut OntologySignedOntIdRegister| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &OntologySignedOntIdRegister| { &m.payload },
                    |m: &mut OntologySignedOntIdRegister| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignedOntIdRegister>(
                    "OntologySignedOntIdRegister",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignedOntIdRegister {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignedOntIdRegister> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignedOntIdRegister,
        };
        unsafe {
            instance.get(OntologySignedOntIdRegister::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignedOntIdRegister {
    fn clear(&mut self) {
        self.signature.clear();
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignedOntIdRegister {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignedOntIdRegister {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignOntIdAddAttributes {
    // message fields
    address_n: ::std::vec::Vec<u32>,
    transaction: ::protobuf::SingularPtrField<OntologyTransaction>,
    ont_id_add_attributes: ::protobuf::SingularPtrField<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignOntIdAddAttributes {
    fn default() -> &'a OntologySignOntIdAddAttributes {
        <OntologySignOntIdAddAttributes as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignOntIdAddAttributes {
    pub fn new() -> OntologySignOntIdAddAttributes {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional .OntologyTransaction transaction = 2;


    pub fn get_transaction(&self) -> &OntologyTransaction {
        self.transaction.as_ref().unwrap_or_else(|| OntologyTransaction::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: OntologyTransaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut OntologyTransaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> OntologyTransaction {
        self.transaction.take().unwrap_or_else(|| OntologyTransaction::new())
    }

    // optional .OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes ont_id_add_attributes = 3;


    pub fn get_ont_id_add_attributes(&self) -> &OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
        self.ont_id_add_attributes.as_ref().unwrap_or_else(|| OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::default_instance())
    }
    pub fn clear_ont_id_add_attributes(&mut self) {
        self.ont_id_add_attributes.clear();
    }

    pub fn has_ont_id_add_attributes(&self) -> bool {
        self.ont_id_add_attributes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ont_id_add_attributes(&mut self, v: OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes) {
        self.ont_id_add_attributes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ont_id_add_attributes(&mut self) -> &mut OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
        if self.ont_id_add_attributes.is_none() {
            self.ont_id_add_attributes.set_default();
        }
        self.ont_id_add_attributes.as_mut().unwrap()
    }

    // Take field
    pub fn take_ont_id_add_attributes(&mut self) -> OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
        self.ont_id_add_attributes.take().unwrap_or_else(|| OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::new())
    }
}

impl ::protobuf::Message for OntologySignOntIdAddAttributes {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ont_id_add_attributes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ont_id_add_attributes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ont_id_add_attributes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ont_id_add_attributes.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignOntIdAddAttributes {
        OntologySignOntIdAddAttributes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "address_n",
                    |m: &OntologySignOntIdAddAttributes| { &m.address_n },
                    |m: &mut OntologySignOntIdAddAttributes| { &mut m.address_n },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OntologyTransaction>>(
                    "transaction",
                    |m: &OntologySignOntIdAddAttributes| { &m.transaction },
                    |m: &mut OntologySignOntIdAddAttributes| { &mut m.transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes>>(
                    "ont_id_add_attributes",
                    |m: &OntologySignOntIdAddAttributes| { &m.ont_id_add_attributes },
                    |m: &mut OntologySignOntIdAddAttributes| { &mut m.ont_id_add_attributes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignOntIdAddAttributes>(
                    "OntologySignOntIdAddAttributes",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignOntIdAddAttributes {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignOntIdAddAttributes> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignOntIdAddAttributes,
        };
        unsafe {
            instance.get(OntologySignOntIdAddAttributes::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignOntIdAddAttributes {
    fn clear(&mut self) {
        self.address_n.clear();
        self.transaction.clear();
        self.ont_id_add_attributes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignOntIdAddAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignOntIdAddAttributes {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
    // message fields
    ont_id: ::protobuf::SingularField<::std::string::String>,
    public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    ont_id_attributes: ::protobuf::RepeatedField<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
    fn default() -> &'a OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
        <OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
    pub fn new() -> OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
        ::std::default::Default::default()
    }

    // optional string ont_id = 1;


    pub fn get_ont_id(&self) -> &str {
        match self.ont_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ont_id(&mut self) {
        self.ont_id.clear();
    }

    pub fn has_ont_id(&self) -> bool {
        self.ont_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ont_id(&mut self, v: ::std::string::String) {
        self.ont_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ont_id(&mut self) -> &mut ::std::string::String {
        if self.ont_id.is_none() {
            self.ont_id.set_default();
        }
        self.ont_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_ont_id(&mut self) -> ::std::string::String {
        self.ont_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes public_key = 2;


    pub fn get_public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // repeated .OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute ont_id_attributes = 3;


    pub fn get_ont_id_attributes(&self) -> &[OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute] {
        &self.ont_id_attributes
    }
    pub fn clear_ont_id_attributes(&mut self) {
        self.ont_id_attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_ont_id_attributes(&mut self, v: ::protobuf::RepeatedField<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute>) {
        self.ont_id_attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ont_id_attributes(&mut self) -> &mut ::protobuf::RepeatedField<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute> {
        &mut self.ont_id_attributes
    }

    // Take field
    pub fn take_ont_id_attributes(&mut self) -> ::protobuf::RepeatedField<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute> {
        ::std::mem::replace(&mut self.ont_id_attributes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
    fn is_initialized(&self) -> bool {
        for v in &self.ont_id_attributes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ont_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ont_id_attributes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ont_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        for value in &self.ont_id_attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ont_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_bytes(2, &v)?;
        }
        for v in &self.ont_id_attributes {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
        OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ont_id",
                    |m: &OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes| { &m.ont_id },
                    |m: &mut OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes| { &mut m.ont_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "public_key",
                    |m: &OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes| { &m.public_key },
                    |m: &mut OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes| { &mut m.public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute>>(
                    "ont_id_attributes",
                    |m: &OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes| { &m.ont_id_attributes },
                    |m: &mut OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes| { &mut m.ont_id_attributes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes>(
                    "OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes,
        };
        unsafe {
            instance.get(OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
    fn clear(&mut self) {
        self.ont_id.clear();
        self.public_key.clear();
        self.ont_id_attributes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute {
    // message fields
    key: ::protobuf::SingularField<::std::string::String>,
    field_type: ::protobuf::SingularField<::std::string::String>,
    value: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute {
    fn default() -> &'a OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute {
        <OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute {
    pub fn new() -> OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute {
        ::std::default::Default::default()
    }

    // optional string key = 1;


    pub fn get_key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string type = 2;


    pub fn get_field_type(&self) -> &str {
        match self.field_type.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        self.field_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 3;


    pub fn get_value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.field_type.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute {
        OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute| { &m.key },
                    |m: &mut OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute| { &m.field_type },
                    |m: &mut OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute| { &m.value },
                    |m: &mut OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute>(
                    "OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute,
        };
        unsafe {
            instance.get(OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute {
    fn clear(&mut self) {
        self.key.clear();
        self.field_type.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OntologySignedOntIdAddAttributes {
    // message fields
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    payload: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OntologySignedOntIdAddAttributes {
    fn default() -> &'a OntologySignedOntIdAddAttributes {
        <OntologySignedOntIdAddAttributes as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignedOntIdAddAttributes {
    pub fn new() -> OntologySignedOntIdAddAttributes {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes payload = 2;


    pub fn get_payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for OntologySignedOntIdAddAttributes {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OntologySignedOntIdAddAttributes {
        OntologySignedOntIdAddAttributes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &OntologySignedOntIdAddAttributes| { &m.signature },
                    |m: &mut OntologySignedOntIdAddAttributes| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &OntologySignedOntIdAddAttributes| { &m.payload },
                    |m: &mut OntologySignedOntIdAddAttributes| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OntologySignedOntIdAddAttributes>(
                    "OntologySignedOntIdAddAttributes",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OntologySignedOntIdAddAttributes {
        static mut instance: ::protobuf::lazy::Lazy<OntologySignedOntIdAddAttributes> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OntologySignedOntIdAddAttributes,
        };
        unsafe {
            instance.get(OntologySignedOntIdAddAttributes::new)
        }
    }
}

impl ::protobuf::Clear for OntologySignedOntIdAddAttributes {
    fn clear(&mut self) {
        self.signature.clear();
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OntologySignedOntIdAddAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignedOntIdAddAttributes {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17messages-ontology.proto\"\xb9\x02\n\x13OntologyTransaction\x12\x18\
    \n\x07version\x18\x01\x20\x01(\rR\x07version\x12\x12\n\x04type\x18\x02\
    \x20\x01(\rR\x04type\x12\x14\n\x05nonce\x18\x03\x20\x01(\rR\x05nonce\x12\
    \x1b\n\tgas_price\x18\x04\x20\x01(\x04R\x08gasPrice\x12\x1b\n\tgas_limit\
    \x18\x05\x20\x01(\x04R\x08gasLimit\x12\x14\n\x05payer\x18\x06\x20\x01(\t\
    R\x05payer\x12M\n\rtx_attributes\x18\x07\x20\x03(\x0b2(.OntologyTransact\
    ion.OntologyTxAttributeR\x0ctxAttributes\x1a?\n\x13OntologyTxAttribute\
    \x12\x14\n\x05usage\x18\x01\x20\x01(\rR\x05usage\x12\x12\n\x04data\x18\
    \x02\x20\x01(\x0cR\x04data\"V\n\x14OntologyGetPublicKey\x12\x1b\n\taddre\
    ss_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\x02\x20\
    \x01(\x08R\x0bshowDisplay\"2\n\x11OntologyPublicKey\x12\x1d\n\npublic_ke\
    y\x18\x01\x20\x01(\x0cR\tpublicKey\"T\n\x12OntologyGetAddress\x12\x1b\n\
    \taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\
    \x02\x20\x01(\x08R\x0bshowDisplay\"+\n\x0fOntologyAddress\x12\x18\n\x07a\
    ddress\x18\x01\x20\x01(\tR\x07address\"\x8d\x03\n\x14OntologySignTransfe\
    r\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x126\n\x0btransac\
    tion\x18\x02\x20\x01(\x0b2\x14.OntologyTransactionR\x0btransaction\x12B\
    \n\x08transfer\x18\x03\x20\x01(\x0b2&.OntologySignTransfer.OntologyTrans\
    ferR\x08transfer\x1a\xdb\x01\n\x10OntologyTransfer\x12J\n\x05asset\x18\
    \x01\x20\x01(\x0e24.OntologySignTransfer.OntologyTransfer.OntologyAssetR\
    \x05asset\x12\x16\n\x06amount\x18\x02\x20\x01(\x04R\x06amount\x12!\n\x0c\
    from_address\x18\x03\x20\x01(\tR\x0bfromAddress\x12\x1d\n\nto_address\
    \x18\x04\x20\x01(\tR\ttoAddress\"!\n\rOntologyAsset\x12\x07\n\x03ONT\x10\
    \x01\x12\x07\n\x03ONG\x10\x02\"P\n\x16OntologySignedTransfer\x12\x1c\n\t\
    signature\x18\x01\x20\x01(\x0cR\tsignature\x12\x18\n\x07payload\x18\x02\
    \x20\x01(\x0cR\x07payload\"\xb0\x02\n\x17OntologySignWithdrawOng\x12\x1b\
    \n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x126\n\x0btransaction\x18\
    \x02\x20\x01(\x0b2\x14.OntologyTransactionR\x0btransaction\x12O\n\x0cwit\
    hdraw_ong\x18\x03\x20\x01(\x0b2,.OntologySignWithdrawOng.OntologyWithdra\
    wOngR\x0bwithdrawOng\x1ao\n\x13OntologyWithdrawOng\x12\x16\n\x06amount\
    \x18\x01\x20\x01(\x04R\x06amount\x12!\n\x0cfrom_address\x18\x02\x20\x01(\
    \tR\x0bfromAddress\x12\x1d\n\nto_address\x18\x03\x20\x01(\tR\ttoAddress\
    \"S\n\x19OntologySignedWithdrawOng\x12\x1c\n\tsignature\x18\x01\x20\x01(\
    \x0cR\tsignature\x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07payload\"\
    \x99\x02\n\x19OntologySignOntIdRegister\x12\x1b\n\taddress_n\x18\x01\x20\
    \x03(\rR\x08addressN\x126\n\x0btransaction\x18\x02\x20\x01(\x0b2\x14.Ont\
    ologyTransactionR\x0btransaction\x12X\n\x0font_id_register\x18\x03\x20\
    \x01(\x0b20.OntologySignOntIdRegister.OntologyOntIdRegisterR\rontIdRegis\
    ter\x1aM\n\x15OntologyOntIdRegister\x12\x15\n\x06ont_id\x18\x01\x20\x01(\
    \tR\x05ontId\x12\x1d\n\npublic_key\x18\x02\x20\x01(\x0cR\tpublicKey\"U\n\
    \x1bOntologySignedOntIdRegister\x12\x1c\n\tsignature\x18\x01\x20\x01(\
    \x0cR\tsignature\x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07payload\"\
    \x8e\x04\n\x1eOntologySignOntIdAddAttributes\x12\x1b\n\taddress_n\x18\
    \x01\x20\x03(\rR\x08addressN\x126\n\x0btransaction\x18\x02\x20\x01(\x0b2\
    \x14.OntologyTransactionR\x0btransaction\x12m\n\x15ont_id_add_attributes\
    \x18\x03\x20\x01(\x0b2:.OntologySignOntIdAddAttributes.OntologyOntIdAddA\
    ttributesR\x12ontIdAddAttributes\x1a\xa7\x02\n\x1aOntologyOntIdAddAttrib\
    utes\x12\x15\n\x06ont_id\x18\x01\x20\x01(\tR\x05ontId\x12\x1d\n\npublic_\
    key\x18\x02\x20\x01(\x0cR\tpublicKey\x12}\n\x11ont_id_attributes\x18\x03\
    \x20\x03(\x0b2Q.OntologySignOntIdAddAttributes.OntologyOntIdAddAttribute\
    s.OntologyOntIdAttributeR\x0fontIdAttributes\x1aT\n\x16OntologyOntIdAttr\
    ibute\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x12\n\x04type\x18\
    \x02\x20\x01(\tR\x04type\x12\x14\n\x05value\x18\x03\x20\x01(\tR\x05value\
    \"Z\n\x20OntologySignedOntIdAddAttributes\x12\x1c\n\tsignature\x18\x01\
    \x20\x01(\x0cR\tsignature\x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07\
    payloadB<\n#com.satoshilabs.trezor.lib.protobufB\x15TrezorMessageOntolog\
    yJ\xeb0\n\x07\x12\x05\0\0\xbc\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x08\x12\x03\x03\0<\n.\n\x02\x08\x01\x12\x03\x03\0<\x1a#\x20Su\
    gar\x20for\x20easier\x20handling\x20in\x20Java\n\n\x08\n\x01\x08\x12\x03\
    \x04\06\n\t\n\x02\x08\x08\x12\x03\x04\06\n,\n\x02\x04\0\x12\x04\n\0\x19\
    \x01\x1a\x20*\n\x20Ontology\x20Transaction\n\x20@embed\n\n\n\n\x03\x04\0\
    \x01\x12\x03\n\x08\x1b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0b\x04\x20\n\x0c\
    \n\x05\x04\0\x02\0\x04\x12\x03\x0b\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x0b\r\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b\x14\x1b\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x0b\x1e\x1f\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x0c\x04\x1d\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0c\x04\x0c\n\x0c\
    \n\x05\x04\0\x02\x01\x05\x12\x03\x0c\r\x13\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x0c\x14\x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0c\x1b\x1c\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\r\x04\x1e\n\x0c\n\x05\x04\0\x02\x02\x04\
    \x12\x03\r\x04\x0c\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\r\r\x13\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\r\x14\x19\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\r\x1c\x1d\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0e\x04\"\n\x0c\n\
    \x05\x04\0\x02\x03\x04\x12\x03\x0e\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03\x0e\r\x13\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0e\x14\x1d\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0e\x20!\n\x0b\n\x04\x04\0\x02\x04\
    \x12\x03\x0f\x04\"\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x0f\x04\x0c\n\
    \x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x0f\r\x13\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03\x0f\x14\x1d\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0f\x20!\
    \n\x0b\n\x04\x04\0\x02\x05\x12\x03\x10\x04\x1e\n\x0c\n\x05\x04\0\x02\x05\
    \x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x10\r\x13\
    \n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x10\x14\x19\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03\x10\x1c\x1d\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x11\x043\
    \n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03\x11\x04\x0c\n\x0c\n\x05\x04\0\x02\
    \x06\x06\x12\x03\x11\r\x20\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x11!.\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x1112\n3\n\x04\x04\0\x03\0\x12\x04\
    \x15\x04\x18\x05\x1a%*\n\x20Attribute\x20of\x20Ontology\x20transaction\n\
    \n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x15\x0c\x1f\n\r\n\x06\x04\0\x03\0\
    \x02\0\x12\x03\x16\x08\"\n\x0e\n\x07\x04\0\x03\0\x02\0\x04\x12\x03\x16\
    \x08\x10\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\x16\x11\x17\n\x0e\n\
    \x07\x04\0\x03\0\x02\0\x01\x12\x03\x16\x18\x1d\n\x0e\n\x07\x04\0\x03\0\
    \x02\0\x03\x12\x03\x16\x20!\n\r\n\x06\x04\0\x03\0\x02\x01\x12\x03\x17\
    \x08\x20\n\x0e\n\x07\x04\0\x03\0\x02\x01\x04\x12\x03\x17\x08\x10\n\x0e\n\
    \x07\x04\0\x03\0\x02\x01\x05\x12\x03\x17\x11\x16\n\x0e\n\x07\x04\0\x03\0\
    \x02\x01\x01\x12\x03\x17\x17\x1b\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\
    \x03\x17\x1e\x1f\n|\n\x02\x04\x01\x12\x04\x20\0#\x01\x1ap*\n\x20Request:\
    \x20Ask\x20device\x20for\x20Ontology\x20public\x20key\x20corresponding\
    \x20to\x20address_n\x20path\n\x20@start\n\x20@next\x20OntologyPublicKey\
    \n\n\n\n\x03\x04\x01\x01\x12\x03\x20\x08\x1c\n=\n\x04\x04\x01\x02\0\x12\
    \x03!\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20from\
    \x20master\x20node\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03!\x04\x0c\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03!\r\x13\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03!\x14\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03!\x20!\nC\n\
    \x04\x04\x01\x02\x01\x12\x03\"\x04#\"6\x20Optionally\x20show\x20on\x20di\
    splay\x20before\x20sending\x20the\x20result\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03\"\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\"\r\
    \x11\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\"\x12\x1e\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\"!\"\n]\n\x02\x04\x02\x12\x04)\0+\x01\x1aQ*\n\
    \x20Response:\x20Contains\x20Ontology\x20public\x20key\x20derived\x20fro\
    m\x20device\x20private\x20seed\n\x20@end\n\n\n\n\x03\x04\x02\x01\x12\x03\
    )\x08\x19\n\"\n\x04\x04\x02\x02\0\x12\x03*\x04\"\"\x15\x20Ontology\x20pu\
    blic\x20key\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03*\x04\x0c\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03*\r\x12\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03*\
    \x13\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03*\x20!\nw\n\x02\x04\x03\
    \x12\x042\05\x01\x1ak*\n\x20Request:\x20Ask\x20device\x20for\x20Ontology\
    \x20address\x20corresponding\x20to\x20address_n\x20path\n\x20@start\n\
    \x20@next\x20OntologyAddress\n\n\n\n\x03\x04\x03\x01\x12\x032\x08\x1a\n=\
    \n\x04\x04\x03\x02\0\x12\x033\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\
    \x20the\x20key\x20from\x20master\x20node\n\n\x0c\n\x05\x04\x03\x02\0\x04\
    \x12\x033\x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x033\r\x13\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x033\x14\x1d\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x033\x20!\nC\n\x04\x04\x03\x02\x01\x12\x034\x04#\"6\x20Optionally\
    \x20show\x20on\x20display\x20before\x20sending\x20the\x20result\n\n\x0c\
    \n\x05\x04\x03\x02\x01\x04\x12\x034\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\
    \x05\x12\x034\r\x11\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x034\x12\x1e\n\
    \x0c\n\x05\x04\x03\x02\x01\x03\x12\x034!\"\nZ\n\x02\x04\x04\x12\x04;\0=\
    \x01\x1aN*\n\x20Response:\x20Contains\x20Ontology\x20address\x20derived\
    \x20from\x20device\x20private\x20seed\n\x20@end\n\n\n\n\x03\x04\x04\x01\
    \x12\x03;\x08\x17\n\x1f\n\x04\x04\x04\x02\0\x12\x03<\x04\x20\"\x12\x20On\
    tology\x20address\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03<\x04\x0c\n\x0c\
    \n\x05\x04\x04\x02\0\x05\x12\x03<\r\x13\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03<\x14\x1b\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03<\x1e\x1f\nd\n\
    \x02\x04\x05\x12\x04D\0X\x01\x1aX*\n\x20Request:\x20Ask\x20device\x20to\
    \x20sign\x20Ontology\x20transfer\n\xc2\xa0@start\n\x20@next\x20OntologyS\
    ignedTransfer\n\n\n\n\x03\x04\x05\x01\x12\x03D\x08\x1c\n=\n\x04\x04\x05\
    \x02\0\x12\x03E\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\
    \x20from\x20master\x20node\n\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03E\x04\
    \x0c\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03E\r\x13\n\x0c\n\x05\x04\x05\
    \x02\0\x01\x12\x03E\x14\x1d\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03E\x20!\
    \n\x0b\n\x04\x04\x05\x02\x01\x12\x03F\x041\n\x0c\n\x05\x04\x05\x02\x01\
    \x04\x12\x03F\x04\x0c\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03F\r\x20\n\
    \x0c\n\x05\x04\x05\x02\x01\x01\x12\x03F!,\n\x0c\n\x05\x04\x05\x02\x01\
    \x03\x12\x03F/0\n\x0b\n\x04\x04\x05\x02\x02\x12\x03G\x04+\n\x0c\n\x05\
    \x04\x05\x02\x02\x04\x12\x03G\x04\x0c\n\x0c\n\x05\x04\x05\x02\x02\x06\
    \x12\x03G\r\x1d\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03G\x1e&\n\x0c\n\
    \x05\x04\x05\x02\x02\x03\x12\x03G)*\n#\n\x04\x04\x05\x03\0\x12\x04K\x04W\
    \x05\x1a\x15*\n\x20Ontology\x20Transfer\n\n\x0c\n\x05\x04\x05\x03\0\x01\
    \x12\x03K\x0c\x1c\n\r\n\x06\x04\x05\x03\0\x02\0\x12\x03L\x08)\n\x0e\n\
    \x07\x04\x05\x03\0\x02\0\x04\x12\x03L\x08\x10\n\x0e\n\x07\x04\x05\x03\0\
    \x02\0\x06\x12\x03L\x11\x1e\n\x0e\n\x07\x04\x05\x03\0\x02\0\x01\x12\x03L\
    \x1f$\n\x0e\n\x07\x04\x05\x03\0\x02\0\x03\x12\x03L'(\n\r\n\x06\x04\x05\
    \x03\0\x02\x01\x12\x03M\x08#\n\x0e\n\x07\x04\x05\x03\0\x02\x01\x04\x12\
    \x03M\x08\x10\n\x0e\n\x07\x04\x05\x03\0\x02\x01\x05\x12\x03M\x11\x17\n\
    \x0e\n\x07\x04\x05\x03\0\x02\x01\x01\x12\x03M\x18\x1e\n\x0e\n\x07\x04\
    \x05\x03\0\x02\x01\x03\x12\x03M!\"\n\r\n\x06\x04\x05\x03\0\x02\x02\x12\
    \x03N\x08)\n\x0e\n\x07\x04\x05\x03\0\x02\x02\x04\x12\x03N\x08\x10\n\x0e\
    \n\x07\x04\x05\x03\0\x02\x02\x05\x12\x03N\x11\x17\n\x0e\n\x07\x04\x05\
    \x03\0\x02\x02\x01\x12\x03N\x18$\n\x0e\n\x07\x04\x05\x03\0\x02\x02\x03\
    \x12\x03N'(\n\r\n\x06\x04\x05\x03\0\x02\x03\x12\x03O\x08'\n\x0e\n\x07\
    \x04\x05\x03\0\x02\x03\x04\x12\x03O\x08\x10\n\x0e\n\x07\x04\x05\x03\0\
    \x02\x03\x05\x12\x03O\x11\x17\n\x0e\n\x07\x04\x05\x03\0\x02\x03\x01\x12\
    \x03O\x18\"\n\x0e\n\x07\x04\x05\x03\0\x02\x03\x03\x12\x03O%&\n\"\n\x06\
    \x04\x05\x03\0\x04\0\x12\x04S\x08V\t\x1a\x12*\n\x20Ontology\x20Asset\n\n\
    \x0e\n\x07\x04\x05\x03\0\x04\0\x01\x12\x03S\r\x1a\n\x0f\n\x08\x04\x05\
    \x03\0\x04\0\x02\0\x12\x03T\x0c\x14\n\x10\n\t\x04\x05\x03\0\x04\0\x02\0\
    \x01\x12\x03T\x0c\x0f\n\x10\n\t\x04\x05\x03\0\x04\0\x02\0\x02\x12\x03T\
    \x12\x13\n\x0f\n\x08\x04\x05\x03\0\x04\0\x02\x01\x12\x03U\x0c\x14\n\x10\
    \n\t\x04\x05\x03\0\x04\0\x02\x01\x01\x12\x03U\x0c\x0f\n\x10\n\t\x04\x05\
    \x03\0\x04\0\x02\x01\x02\x12\x03U\x12\x13\nD\n\x02\x04\x06\x12\x04^\0a\
    \x01\x1a8*\n\x20Response:\x20Contains\x20Ontology\x20transfer\x20signatu\
    re\n\x20@end\n\n\n\n\x03\x04\x06\x01\x12\x03^\x08\x1e\n\x0b\n\x04\x04\
    \x06\x02\0\x12\x03_\x04!\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03_\x04\x0c\
    \n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03_\r\x12\n\x0c\n\x05\x04\x06\x02\0\
    \x01\x12\x03_\x13\x1c\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03_\x1f\x20\n\
    \x0b\n\x04\x04\x06\x02\x01\x12\x03`\x04\x1f\n\x0c\n\x05\x04\x06\x02\x01\
    \x04\x12\x03`\x04\x0c\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03`\r\x12\n\
    \x0c\n\x05\x04\x06\x02\x01\x01\x12\x03`\x13\x1a\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x03`\x1d\x1e\nm\n\x02\x04\x07\x12\x04h\0t\x01\x1aa*\n\x20Re\
    quest:\x20Ask\x20device\x20to\x20sign\x20Ontology\x20ONG\x20withdrawal\n\
    \xc2\xa0@start\n\x20@next\x20OntologySignedWithdrawOng\n\n\n\n\x03\x04\
    \x07\x01\x12\x03h\x08\x1f\n=\n\x04\x04\x07\x02\0\x12\x03i\x04\"\"0\x20BI\
    P-32\x20path\x20to\x20derive\x20the\x20key\x20from\x20master\x20node\n\n\
    \x0c\n\x05\x04\x07\x02\0\x04\x12\x03i\x04\x0c\n\x0c\n\x05\x04\x07\x02\0\
    \x05\x12\x03i\r\x13\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03i\x14\x1d\n\x0c\
    \n\x05\x04\x07\x02\0\x03\x12\x03i\x20!\n\x0b\n\x04\x04\x07\x02\x01\x12\
    \x03j\x041\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03j\x04\x0c\n\x0c\n\x05\
    \x04\x07\x02\x01\x06\x12\x03j\r\x20\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\
    \x03j!,\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03j/0\n\x0b\n\x04\x04\x07\
    \x02\x02\x12\x03k\x042\n\x0c\n\x05\x04\x07\x02\x02\x04\x12\x03k\x04\x0c\
    \n\x0c\n\x05\x04\x07\x02\x02\x06\x12\x03k\r\x20\n\x0c\n\x05\x04\x07\x02\
    \x02\x01\x12\x03k!-\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03k01\n)\n\x04\
    \x04\x07\x03\0\x12\x04o\x04s\x05\x1a\x1b*\n\x20Ontology\x20ONG\x20Withdr\
    awal\n\n\x0c\n\x05\x04\x07\x03\0\x01\x12\x03o\x0c\x1f\n\r\n\x06\x04\x07\
    \x03\0\x02\0\x12\x03p\x08#\n\x0e\n\x07\x04\x07\x03\0\x02\0\x04\x12\x03p\
    \x08\x10\n\x0e\n\x07\x04\x07\x03\0\x02\0\x05\x12\x03p\x11\x17\n\x0e\n\
    \x07\x04\x07\x03\0\x02\0\x01\x12\x03p\x18\x1e\n\x0e\n\x07\x04\x07\x03\0\
    \x02\0\x03\x12\x03p!\"\n\r\n\x06\x04\x07\x03\0\x02\x01\x12\x03q\x08)\n\
    \x0e\n\x07\x04\x07\x03\0\x02\x01\x04\x12\x03q\x08\x10\n\x0e\n\x07\x04\
    \x07\x03\0\x02\x01\x05\x12\x03q\x11\x17\n\x0e\n\x07\x04\x07\x03\0\x02\
    \x01\x01\x12\x03q\x18$\n\x0e\n\x07\x04\x07\x03\0\x02\x01\x03\x12\x03q'(\
    \n\r\n\x06\x04\x07\x03\0\x02\x02\x12\x03r\x08'\n\x0e\n\x07\x04\x07\x03\0\
    \x02\x02\x04\x12\x03r\x08\x10\n\x0e\n\x07\x04\x07\x03\0\x02\x02\x05\x12\
    \x03r\x11\x17\n\x0e\n\x07\x04\x07\x03\0\x02\x02\x01\x12\x03r\x18\"\n\x0e\
    \n\x07\x04\x07\x03\0\x02\x02\x03\x12\x03r%&\nJ\n\x02\x04\x08\x12\x04z\0}\
    \x01\x1a>*\n\x20Response:\x20Contains\x20Ontology\x20ONG\x20withdrawal\
    \x20signature\n\x20@end\n\n\n\n\x03\x04\x08\x01\x12\x03z\x08!\n\x0b\n\
    \x04\x04\x08\x02\0\x12\x03{\x04!\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03{\
    \x04\x0c\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03{\r\x12\n\x0c\n\x05\x04\
    \x08\x02\0\x01\x12\x03{\x13\x1c\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03{\
    \x1f\x20\n\x0b\n\x04\x04\x08\x02\x01\x12\x03|\x04\x1f\n\x0c\n\x05\x04\
    \x08\x02\x01\x04\x12\x03|\x04\x0c\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\
    \x03|\r\x12\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03|\x13\x1a\n\x0c\n\x05\
    \x04\x08\x02\x01\x03\x12\x03|\x1d\x1e\nv\n\x02\x04\t\x12\x06\x84\x01\0\
    \x8f\x01\x01\x1ah*\n\x20Request:\x20Ask\x20device\x20to\x20sign\x20Ontol\
    ogy\x20ONT\x20ID\x20registration\n\xc2\xa0@start\n\x20@next\x20OntologyS\
    ignedOntIdRegister\n\n\x0b\n\x03\x04\t\x01\x12\x04\x84\x01\x08!\n>\n\x04\
    \x04\t\x02\0\x12\x04\x85\x01\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\
    \x20the\x20key\x20from\x20master\x20node\n\n\r\n\x05\x04\t\x02\0\x04\x12\
    \x04\x85\x01\x04\x0c\n\r\n\x05\x04\t\x02\0\x05\x12\x04\x85\x01\r\x13\n\r\
    \n\x05\x04\t\x02\0\x01\x12\x04\x85\x01\x14\x1d\n\r\n\x05\x04\t\x02\0\x03\
    \x12\x04\x85\x01\x20!\n\x0c\n\x04\x04\t\x02\x01\x12\x04\x86\x01\x041\n\r\
    \n\x05\x04\t\x02\x01\x04\x12\x04\x86\x01\x04\x0c\n\r\n\x05\x04\t\x02\x01\
    \x06\x12\x04\x86\x01\r\x20\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x86\x01!,\
    \n\r\n\x05\x04\t\x02\x01\x03\x12\x04\x86\x01/0\n\x0c\n\x04\x04\t\x02\x02\
    \x12\x04\x87\x01\x047\n\r\n\x05\x04\t\x02\x02\x04\x12\x04\x87\x01\x04\
    \x0c\n\r\n\x05\x04\t\x02\x02\x06\x12\x04\x87\x01\r\"\n\r\n\x05\x04\t\x02\
    \x02\x01\x12\x04\x87\x01#2\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\x87\x0156\
    \n0\n\x04\x04\t\x03\0\x12\x06\x8b\x01\x04\x8e\x01\x05\x1a\x20*\n\x20Onto\
    logy\x20ONT\x20ID\x20registration\n\n\r\n\x05\x04\t\x03\0\x01\x12\x04\
    \x8b\x01\x0c!\n\x0e\n\x06\x04\t\x03\0\x02\0\x12\x04\x8c\x01\x08#\n\x0f\n\
    \x07\x04\t\x03\0\x02\0\x04\x12\x04\x8c\x01\x08\x10\n\x0f\n\x07\x04\t\x03\
    \0\x02\0\x05\x12\x04\x8c\x01\x11\x17\n\x0f\n\x07\x04\t\x03\0\x02\0\x01\
    \x12\x04\x8c\x01\x18\x1e\n\x0f\n\x07\x04\t\x03\0\x02\0\x03\x12\x04\x8c\
    \x01!\"\n\x0e\n\x06\x04\t\x03\0\x02\x01\x12\x04\x8d\x01\x08&\n\x0f\n\x07\
    \x04\t\x03\0\x02\x01\x04\x12\x04\x8d\x01\x08\x10\n\x0f\n\x07\x04\t\x03\0\
    \x02\x01\x05\x12\x04\x8d\x01\x11\x16\n\x0f\n\x07\x04\t\x03\0\x02\x01\x01\
    \x12\x04\x8d\x01\x17!\n\x0f\n\x07\x04\t\x03\0\x02\x01\x03\x12\x04\x8d\
    \x01$%\nQ\n\x02\x04\n\x12\x06\x95\x01\0\x98\x01\x01\x1aC*\n\x20Response:\
    \x20Contains\x20Ontology\x20ONT\x20ID\x20registration\x20signature\n\x20\
    @end\n\n\x0b\n\x03\x04\n\x01\x12\x04\x95\x01\x08#\n\x0c\n\x04\x04\n\x02\
    \0\x12\x04\x96\x01\x04!\n\r\n\x05\x04\n\x02\0\x04\x12\x04\x96\x01\x04\
    \x0c\n\r\n\x05\x04\n\x02\0\x05\x12\x04\x96\x01\r\x12\n\r\n\x05\x04\n\x02\
    \0\x01\x12\x04\x96\x01\x13\x1c\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x96\x01\
    \x1f\x20\n\x0c\n\x04\x04\n\x02\x01\x12\x04\x97\x01\x04\x1f\n\r\n\x05\x04\
    \n\x02\x01\x04\x12\x04\x97\x01\x04\x0c\n\r\n\x05\x04\n\x02\x01\x05\x12\
    \x04\x97\x01\r\x12\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\x97\x01\x13\x1a\n\
    \r\n\x05\x04\n\x02\x01\x03\x12\x04\x97\x01\x1d\x1e\n\x80\x01\n\x02\x04\
    \x0b\x12\x06\x9f\x01\0\xb3\x01\x01\x1ar*\n\x20Request:\x20Ask\x20device\
    \x20to\x20sign\x20Ontology\x20ONT\x20ID\x20attributes\x20adding\n\xc2\
    \xa0@start\n\x20@next\x20OntologySignedOntIdAddAttributes\n\n\x0b\n\x03\
    \x04\x0b\x01\x12\x04\x9f\x01\x08&\n>\n\x04\x04\x0b\x02\0\x12\x04\xa0\x01\
    \x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20from\x20mas\
    ter\x20node\n\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04\xa0\x01\x04\x0c\n\r\n\
    \x05\x04\x0b\x02\0\x05\x12\x04\xa0\x01\r\x13\n\r\n\x05\x04\x0b\x02\0\x01\
    \x12\x04\xa0\x01\x14\x1d\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xa0\x01\x20\
    !\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\xa1\x01\x041\n\r\n\x05\x04\x0b\x02\
    \x01\x04\x12\x04\xa1\x01\x04\x0c\n\r\n\x05\x04\x0b\x02\x01\x06\x12\x04\
    \xa1\x01\r\x20\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\xa1\x01!,\n\r\n\x05\
    \x04\x0b\x02\x01\x03\x12\x04\xa1\x01/0\n\x0c\n\x04\x04\x0b\x02\x02\x12\
    \x04\xa2\x01\x04B\n\r\n\x05\x04\x0b\x02\x02\x04\x12\x04\xa2\x01\x04\x0c\
    \n\r\n\x05\x04\x0b\x02\x02\x06\x12\x04\xa2\x01\r'\n\r\n\x05\x04\x0b\x02\
    \x02\x01\x12\x04\xa2\x01(=\n\r\n\x05\x04\x0b\x02\x02\x03\x12\x04\xa2\x01\
    @A\n5\n\x04\x04\x0b\x03\0\x12\x06\xa6\x01\x04\xb2\x01\x05\x1a%*\n\x20Ont\
    ology\x20ONT\x20ID\x20attributes\x20adding\n\n\r\n\x05\x04\x0b\x03\0\x01\
    \x12\x04\xa6\x01\x0c&\n\x0e\n\x06\x04\x0b\x03\0\x02\0\x12\x04\xa7\x01\
    \x08#\n\x0f\n\x07\x04\x0b\x03\0\x02\0\x04\x12\x04\xa7\x01\x08\x10\n\x0f\
    \n\x07\x04\x0b\x03\0\x02\0\x05\x12\x04\xa7\x01\x11\x17\n\x0f\n\x07\x04\
    \x0b\x03\0\x02\0\x01\x12\x04\xa7\x01\x18\x1e\n\x0f\n\x07\x04\x0b\x03\0\
    \x02\0\x03\x12\x04\xa7\x01!\"\n\x0e\n\x06\x04\x0b\x03\0\x02\x01\x12\x04\
    \xa8\x01\x08&\n\x0f\n\x07\x04\x0b\x03\0\x02\x01\x04\x12\x04\xa8\x01\x08\
    \x10\n\x0f\n\x07\x04\x0b\x03\0\x02\x01\x05\x12\x04\xa8\x01\x11\x16\n\x0f\
    \n\x07\x04\x0b\x03\0\x02\x01\x01\x12\x04\xa8\x01\x17!\n\x0f\n\x07\x04\
    \x0b\x03\0\x02\x01\x03\x12\x04\xa8\x01$%\n\x0e\n\x06\x04\x0b\x03\0\x02\
    \x02\x12\x04\xa9\x01\x08>\n\x0f\n\x07\x04\x0b\x03\0\x02\x02\x04\x12\x04\
    \xa9\x01\x08\x10\n\x0f\n\x07\x04\x0b\x03\0\x02\x02\x06\x12\x04\xa9\x01\
    \x11'\n\x0f\n\x07\x04\x0b\x03\0\x02\x02\x01\x12\x04\xa9\x01(9\n\x0f\n\
    \x07\x04\x0b\x03\0\x02\x02\x03\x12\x04\xa9\x01<=\n2\n\x06\x04\x0b\x03\0\
    \x03\0\x12\x06\xad\x01\x08\xb1\x01\t\x1a\x20*\n\x20Attribute\x20of\x20On\
    tology\x20ONT\x20ID\n\n\x0f\n\x07\x04\x0b\x03\0\x03\0\x01\x12\x04\xad\
    \x01\x10&\n\x10\n\x08\x04\x0b\x03\0\x03\0\x02\0\x12\x04\xae\x01\x0c$\n\
    \x11\n\t\x04\x0b\x03\0\x03\0\x02\0\x04\x12\x04\xae\x01\x0c\x14\n\x11\n\t\
    \x04\x0b\x03\0\x03\0\x02\0\x05\x12\x04\xae\x01\x15\x1b\n\x11\n\t\x04\x0b\
    \x03\0\x03\0\x02\0\x01\x12\x04\xae\x01\x1c\x1f\n\x11\n\t\x04\x0b\x03\0\
    \x03\0\x02\0\x03\x12\x04\xae\x01\"#\n\x10\n\x08\x04\x0b\x03\0\x03\0\x02\
    \x01\x12\x04\xaf\x01\x0c%\n\x11\n\t\x04\x0b\x03\0\x03\0\x02\x01\x04\x12\
    \x04\xaf\x01\x0c\x14\n\x11\n\t\x04\x0b\x03\0\x03\0\x02\x01\x05\x12\x04\
    \xaf\x01\x15\x1b\n\x11\n\t\x04\x0b\x03\0\x03\0\x02\x01\x01\x12\x04\xaf\
    \x01\x1c\x20\n\x11\n\t\x04\x0b\x03\0\x03\0\x02\x01\x03\x12\x04\xaf\x01#$\
    \n\x10\n\x08\x04\x0b\x03\0\x03\0\x02\x02\x12\x04\xb0\x01\x0c&\n\x11\n\t\
    \x04\x0b\x03\0\x03\0\x02\x02\x04\x12\x04\xb0\x01\x0c\x14\n\x11\n\t\x04\
    \x0b\x03\0\x03\0\x02\x02\x05\x12\x04\xb0\x01\x15\x1b\n\x11\n\t\x04\x0b\
    \x03\0\x03\0\x02\x02\x01\x12\x04\xb0\x01\x1c!\n\x11\n\t\x04\x0b\x03\0\
    \x03\0\x02\x02\x03\x12\x04\xb0\x01$%\nV\n\x02\x04\x0c\x12\x06\xb9\x01\0\
    \xbc\x01\x01\x1aH*\n\x20Response:\x20Contains\x20Ontology\x20ONT\x20ID\
    \x20attributes\x20adding\x20signature\n\x20@end\n\n\x0b\n\x03\x04\x0c\
    \x01\x12\x04\xb9\x01\x08(\n\x0c\n\x04\x04\x0c\x02\0\x12\x04\xba\x01\x04!\
    \n\r\n\x05\x04\x0c\x02\0\x04\x12\x04\xba\x01\x04\x0c\n\r\n\x05\x04\x0c\
    \x02\0\x05\x12\x04\xba\x01\r\x12\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xba\
    \x01\x13\x1c\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xba\x01\x1f\x20\n\x0c\n\
    \x04\x04\x0c\x02\x01\x12\x04\xbb\x01\x04\x1f\n\r\n\x05\x04\x0c\x02\x01\
    \x04\x12\x04\xbb\x01\x04\x0c\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xbb\
    \x01\r\x12\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\xbb\x01\x13\x1a\n\r\n\
    \x05\x04\x0c\x02\x01\x03\x12\x04\xbb\x01\x1d\x1e\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
